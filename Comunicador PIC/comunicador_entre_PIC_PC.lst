;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 01/03/2018 01:09:05
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EFF4  	GOTO        1000
_interrupt:
;comunicador_entre_PIC_PC.c,149 :: 		void interrupt() //a interrupção de alta prioridade apenas armazenará os dados recebidos (no momento apenas do computador)
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;comunicador_entre_PIC_PC.c,151 :: 		if(RC1IF_bit)
0x0010	0xF017CFE1  	MOVFF       FSR1L, 23
0x0014	0xF018CFE2  	MOVFF       FSR1H, 24
0x0018	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x001A	0xD01B      	BRA         L_interrupt26
;comunicador_entre_PIC_PC.c,153 :: 		bufferPc[posBufferPc] = RC1REG;
0x001C	0x0EC5      	MOVLW       bufferPc
0x001E	0x0100      	MOVLB       0
0x0020	0x25C3      	ADDWF       _posBufferPc, 0, 1
0x0022	0x6EE1      	MOVWF       FSR1L 
0x0024	0x0E00      	MOVLW       hi_addr(bufferPc)
0x0026	0x21C4      	ADDWFC      _posBufferPc+1, 0, 1
0x0028	0x6EE2      	MOVWF       FSR1H 
0x002A	0xFFE6CFAE  	MOVFF       RC1REG, POSTINC1
;comunicador_entre_PIC_PC.c,154 :: 		posBufferPc++;
0x002E	0x0E01      	MOVLW       1
0x0030	0x25C3      	ADDWF       _posBufferPc, 0, 1
0x0032	0x6E00      	MOVWF       R0 
0x0034	0x0E00      	MOVLW       0
0x0036	0x21C4      	ADDWFC      _posBufferPc+1, 0, 1
0x0038	0x6E01      	MOVWF       R1 
0x003A	0xF0C3C000  	MOVFF       R0, _posBufferPc
0x003E	0xF0C4C001  	MOVFF       R1, _posBufferPc+1
;comunicador_entre_PIC_PC.c,155 :: 		bufferPc[posBufferPc] = 0x00;
0x0042	0x0EC5      	MOVLW       bufferPc
0x0044	0x25C3      	ADDWF       _posBufferPc, 0, 1
0x0046	0x6EE1      	MOVWF       FSR1L 
0x0048	0x0E00      	MOVLW       hi_addr(bufferPc)
0x004A	0x21C4      	ADDWFC      _posBufferPc+1, 0, 1
0x004C	0x6EE2      	MOVWF       FSR1H 
0x004E	0x6AE6      	CLRF        POSTINC1 
;comunicador_entre_PIC_PC.c,156 :: 		}
0x0050	0xD01C      	BRA         L_interrupt27
L_interrupt26:
;comunicador_entre_PIC_PC.c,157 :: 		else if(RC2IF_bit)
0x0052	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x0054	0xD01A      	BRA         L_interrupt28
;comunicador_entre_PIC_PC.c,160 :: 		bufferModulo[posBufferModulo] = RC2REG;
0x0056	0x0100      	MOVLB       0
0x0058	0x0EF7      	MOVLW       bufferModulo
0x005A	0x25C1      	ADDWF       _posBufferModulo, 0, 1
0x005C	0x6EE1      	MOVWF       FSR1L 
0x005E	0x0E00      	MOVLW       hi_addr(bufferModulo)
0x0060	0x21C2      	ADDWFC      _posBufferModulo+1, 0, 1
0x0062	0x6EE2      	MOVWF       FSR1H 
0x0064	0xFFE6CF74  	MOVFF       RC2REG, POSTINC1
;comunicador_entre_PIC_PC.c,161 :: 		posBufferModulo++;
0x0068	0x0E01      	MOVLW       1
0x006A	0x25C1      	ADDWF       _posBufferModulo, 0, 1
0x006C	0x6E00      	MOVWF       R0 
0x006E	0x0E00      	MOVLW       0
0x0070	0x21C2      	ADDWFC      _posBufferModulo+1, 0, 1
0x0072	0x6E01      	MOVWF       R1 
0x0074	0xF0C1C000  	MOVFF       R0, _posBufferModulo
0x0078	0xF0C2C001  	MOVFF       R1, _posBufferModulo+1
;comunicador_entre_PIC_PC.c,162 :: 		bufferModulo[posBufferModulo] = 0x00;
0x007C	0x0EF7      	MOVLW       bufferModulo
0x007E	0x25C1      	ADDWF       _posBufferModulo, 0, 1
0x0080	0x6EE1      	MOVWF       FSR1L 
0x0082	0x0E00      	MOVLW       hi_addr(bufferModulo)
0x0084	0x21C2      	ADDWFC      _posBufferModulo+1, 0, 1
0x0086	0x6EE2      	MOVWF       FSR1H 
0x0088	0x6AE6      	CLRF        POSTINC1 
;comunicador_entre_PIC_PC.c,163 :: 		}
L_interrupt28:
L_interrupt27:
;comunicador_entre_PIC_PC.c,164 :: 		T6CON.TMR6ON = 1;
0x008A	0x010F      	MOVLB       15
0x008C	0x854A      	BSF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,165 :: 		TMR6 = 0;
0x008E	0x6B4C      	CLRF        TMR6, 1
;comunicador_entre_PIC_PC.c,166 :: 		}
L_end_interrupt:
L__interrupt52:
0x0090	0xF000C016  	MOVFF       22, R0
0x0094	0xF001C015  	MOVFF       21, R1
0x0098	0xFFE1C017  	MOVFF       23, FSR1L
0x009C	0xFFE2C018  	MOVFF       24, FSR1H
0x00A0	0x0011      	RETFIE      1
; end of _interrupt
_Div_8X8_U:
;__Lib_Math.c,77 :: 		
;__Lib_Math.c,84 :: 		
0x00A2	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,85 :: 		
0x00A4	0x0E08      	MOVLW       8
;__Lib_Math.c,86 :: 		
0x00A6	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,87 :: 		
0x00A8	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c,88 :: 		
0x00AA	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,89 :: 		
0x00AC	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,90 :: 		
0x00AE	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,91 :: 		
0x00B0	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,92 :: 		
0x00B2	0xD002      	BRA         $+6
;__Lib_Math.c,93 :: 		
0x00B4	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,94 :: 		
0x00B6	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,95 :: 		
0x00B8	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,96 :: 		
0x00BA	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,97 :: 		
0x00BC	0xD7F5      	BRA         $-20
;__Lib_Math.c,99 :: 		
L_end_Div_8X8_U:
0x00BE	0x0012      	RETURN      0
; end of _Div_8X8_U
_ByteToStr:
;__Lib_Conversions.c,66 :: 		
;__Lib_Conversions.c,69 :: 		
0x00C0	0x0101      	MOVLB       1
0x00C2	0x6B43      	CLRF        ByteToStr_DigitPos_L0, 1
L_ByteToStr0:
0x00C4	0x0E03      	MOVLW       3
0x00C6	0x5D43      	SUBWF       ByteToStr_DigitPos_L0, 0, 1
0x00C8	0xE20A      	BC          L_ByteToStr1
;__Lib_Conversions.c,70 :: 		
0x00CA	0x5143      	MOVF        ByteToStr_DigitPos_L0, 0, 1
0x00CC	0x2541      	ADDWF       FARG_ByteToStr_output, 0, 1
0x00CE	0x6EE1      	MOVWF       FSR1L 
0x00D0	0x0E00      	MOVLW       0
0x00D2	0x2142      	ADDWFC      FARG_ByteToStr_output+1, 0, 1
0x00D4	0x6EE2      	MOVWF       FSR1H 
0x00D6	0x0E20      	MOVLW       32
0x00D8	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,69 :: 		
0x00DA	0x2B43      	INCF        ByteToStr_DigitPos_L0, 1, 1
;__Lib_Conversions.c,70 :: 		
0x00DC	0xD7F3      	BRA         L_ByteToStr0
L_ByteToStr1:
;__Lib_Conversions.c,72 :: 		
0x00DE	0x5143      	MOVF        ByteToStr_DigitPos_L0, 0, 1
0x00E0	0x2541      	ADDWF       FARG_ByteToStr_output, 0, 1
0x00E2	0x6EE1      	MOVWF       FSR1L 
0x00E4	0x0E00      	MOVLW       0
0x00E6	0x2142      	ADDWFC      FARG_ByteToStr_output+1, 0, 1
0x00E8	0x6EE2      	MOVWF       FSR1H 
0x00EA	0x6AE6      	CLRF        POSTINC1 
0x00EC	0x0743      	DECF        ByteToStr_DigitPos_L0, 1, 1
;__Lib_Conversions.c,74 :: 		
L_ByteToStr3:
;__Lib_Conversions.c,75 :: 		
0x00EE	0x5143      	MOVF        ByteToStr_DigitPos_L0, 0, 1
0x00F0	0x2541      	ADDWF       FARG_ByteToStr_output, 0, 1
0x00F2	0x6F44      	MOVWF       FLOC__ByteToStr, 1
0x00F4	0x0E00      	MOVLW       0
0x00F6	0x2142      	ADDWFC      FARG_ByteToStr_output+1, 0, 1
0x00F8	0x6F45      	MOVWF       FLOC__ByteToStr+1, 1
0x00FA	0x0E0A      	MOVLW       10
0x00FC	0x6E04      	MOVWF       R4 
0x00FE	0xF000C140  	MOVFF       FARG_ByteToStr_input, R0
0x0102	0xDFCF      	RCALL       _Div_8X8_U
0x0104	0xF000C008  	MOVFF       R8, R0
0x0108	0x0E30      	MOVLW       48
0x010A	0x2600      	ADDWF       R0, 1 
0x010C	0xFFE1C144  	MOVFF       FLOC__ByteToStr, FSR1L
0x0110	0xFFE2C145  	MOVFF       FLOC__ByteToStr+1, FSR1H
0x0114	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_Conversions.c,76 :: 		
0x0118	0x0E0A      	MOVLW       10
0x011A	0x6E04      	MOVWF       R4 
0x011C	0xF000C140  	MOVFF       FARG_ByteToStr_input, R0
0x0120	0xDFC0      	RCALL       _Div_8X8_U
0x0122	0xF140C000  	MOVFF       R0, FARG_ByteToStr_input
;__Lib_Conversions.c,77 :: 		
0x0126	0x5000      	MOVF        R0, 0 
0x0128	0x0A00      	XORLW       0
0x012A	0xE101      	BNZ         L_ByteToStr5
;__Lib_Conversions.c,78 :: 		
0x012C	0xD002      	BRA         L_ByteToStr4
L_ByteToStr5:
;__Lib_Conversions.c,79 :: 		
0x012E	0x0743      	DECF        ByteToStr_DigitPos_L0, 1, 1
;__Lib_Conversions.c,80 :: 		
0x0130	0xD7DE      	BRA         L_ByteToStr3
L_ByteToStr4:
;__Lib_Conversions.c,81 :: 		
L_end_ByteToStr:
0x0132	0x0012      	RETURN      0
; end of _ByteToStr
_escrever:
;comunicador_entre_PIC_PC.c,89 :: 		void escrever(char paraQuem, char *mensagem)
;comunicador_entre_PIC_PC.c,93 :: 		if(paraQuem = 'p') regSend = &TXREG1;
0x0134	0x0E70      	MOVLW       112
0x0136	0x0101      	MOVLB       1
0x0138	0x6F37      	MOVWF       FARG_escrever_paraQuem, 1
0x013A	0x0EAD      	MOVLW       TXREG1
0x013C	0x6E03      	MOVWF       R3 
0x013E	0x0E0F      	MOVLW       hi_addr(TXREG1)
0x0140	0x6E04      	MOVWF       R4 
;comunicador_entre_PIC_PC.c,94 :: 		else regSend = &TXREG2;
L_escrever16:
;comunicador_entre_PIC_PC.c,95 :: 		for(i = 0; mensagem[i] != 0x00; i++)
0x0142	0x6A01      	CLRF        R1 
0x0144	0x6A02      	CLRF        R2 
L_escrever17:
0x0146	0x5001      	MOVF        R1, 0 
0x0148	0x2538      	ADDWF       FARG_escrever_mensagem, 0, 1
0x014A	0x6EE9      	MOVWF       FSR0L 
0x014C	0x5002      	MOVF        R2, 0 
0x014E	0x2139      	ADDWFC      FARG_escrever_mensagem+1, 0, 1
0x0150	0x6EEA      	MOVWF       FSR0H 
0x0152	0x50EE      	MOVF        POSTINC0, 0 
0x0154	0x0A00      	XORLW       0
0x0156	0xE017      	BZ          L_escrever18
;comunicador_entre_PIC_PC.c,97 :: 		*regSend = mensagem[i];
0x0158	0x5001      	MOVF        R1, 0 
0x015A	0x2538      	ADDWF       FARG_escrever_mensagem, 0, 1
0x015C	0x6EE9      	MOVWF       FSR0L 
0x015E	0x5002      	MOVF        R2, 0 
0x0160	0x2139      	ADDWFC      FARG_escrever_mensagem+1, 0, 1
0x0162	0x6EEA      	MOVWF       FSR0H 
0x0164	0xFFE1C003  	MOVFF       R3, FSR1L
0x0168	0xFFE2C004  	MOVFF       R4, FSR1H
0x016C	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;comunicador_entre_PIC_PC.c,98 :: 		delay_ms(1);
0x0170	0x0E0B      	MOVLW       11
0x0172	0x6E0C      	MOVWF       R12, 0
0x0174	0x0E0F      	MOVLW       15
0x0176	0x6E0D      	MOVWF       R13, 0
L_escrever20:
0x0178	0x2E0D      	DECFSZ      R13, 1, 0
0x017A	0xD7FE      	BRA         L_escrever20
0x017C	0x2E0C      	DECFSZ      R12, 1, 0
0x017E	0xD7FC      	BRA         L_escrever20
;comunicador_entre_PIC_PC.c,95 :: 		for(i = 0; mensagem[i] != 0x00; i++)
0x0180	0x4A01      	INFSNZ      R1, 1 
0x0182	0x2A02      	INCF        R2, 1 
;comunicador_entre_PIC_PC.c,99 :: 		}
0x0184	0xD7E0      	BRA         L_escrever17
L_escrever18:
;comunicador_entre_PIC_PC.c,100 :: 		*regSend = '\n';
0x0186	0xFFE1C003  	MOVFF       R3, FSR1L
0x018A	0xFFE2C004  	MOVFF       R4, FSR1H
0x018E	0x0E0A      	MOVLW       10
0x0190	0x6EE6      	MOVWF       POSTINC1 
;comunicador_entre_PIC_PC.c,101 :: 		}
L_end_escrever:
0x0192	0x0012      	RETURN      0
; end of _escrever
_ShortToStr:
;__Lib_Conversions.c,131 :: 		
;__Lib_Conversions.c,136 :: 		
0x0194	0x0101      	MOVLB       1
0x0196	0x6B3C      	CLRF        ShortToStr_negative_L0, 1
0x0198	0x6B3D      	CLRF        ShortToStr_negative_L0+1, 1
;__Lib_Conversions.c,137 :: 		
0x019A	0xF13EC137  	MOVFF       FARG_ShortToStr_input, ShortToStr_inbyte_L0
0x019E	0x0E00      	MOVLW       0
0x01A0	0xBF37      	BTFSC       FARG_ShortToStr_input, 7, 1
0x01A2	0x0EFF      	MOVLW       255
0x01A4	0x6F3F      	MOVWF       ShortToStr_inbyte_L0+1, 1
;__Lib_Conversions.c,138 :: 		
0x01A6	0x0E80      	MOVLW       128
0x01A8	0x1937      	XORWF       FARG_ShortToStr_input, 0, 1
0x01AA	0x6E00      	MOVWF       R0 
0x01AC	0x0E80      	MOVLW       128
0x01AE	0x0A00      	XORLW       0
0x01B0	0x5C00      	SUBWF       R0, 0 
0x01B2	0xE20A      	BC          L_ShortToStr22
;__Lib_Conversions.c,139 :: 		
0x01B4	0x4B3C      	INFSNZ      ShortToStr_negative_L0, 1, 1
0x01B6	0x2B3D      	INCF        ShortToStr_negative_L0+1, 1, 1
;__Lib_Conversions.c,140 :: 		
0x01B8	0x5137      	MOVF        FARG_ShortToStr_input, 0, 1
0x01BA	0x0800      	SUBLW       0
0x01BC	0x6F3E      	MOVWF       ShortToStr_inbyte_L0, 1
0x01BE	0x6B3F      	CLRF        ShortToStr_inbyte_L0+1, 1
0x01C0	0x0E00      	MOVLW       0
0x01C2	0xBF37      	BTFSC       FARG_ShortToStr_input, 7, 1
0x01C4	0x0EFF      	MOVLW       255
0x01C6	0x5B3F      	SUBWFB      ShortToStr_inbyte_L0+1, 1, 1
;__Lib_Conversions.c,141 :: 		
L_ShortToStr22:
;__Lib_Conversions.c,142 :: 		
0x01C8	0xF140C13E  	MOVFF       ShortToStr_inbyte_L0, FARG_ByteToStr_input
0x01CC	0xF141C138  	MOVFF       FARG_ShortToStr_output, FARG_ByteToStr_output
0x01D0	0xF142C139  	MOVFF       FARG_ShortToStr_output+1, FARG_ByteToStr_output+1
0x01D4	0xDF75      	RCALL       _ByteToStr
;__Lib_Conversions.c,144 :: 		
0x01D6	0x0E04      	MOVLW       4
0x01D8	0x6F3A      	MOVWF       ShortToStr_i_L0, 1
0x01DA	0x0E00      	MOVLW       0
0x01DC	0x6F3B      	MOVWF       ShortToStr_i_L0+1, 1
;__Lib_Conversions.c,145 :: 		
L_ShortToStr23:
0x01DE	0x0E00      	MOVLW       0
0x01E0	0x6E00      	MOVWF       R0 
0x01E2	0x513B      	MOVF        ShortToStr_i_L0+1, 0, 1
0x01E4	0x5C00      	SUBWF       R0, 0 
0x01E6	0xE102      	BNZ         L__ShortToStr163
0x01E8	0x513A      	MOVF        ShortToStr_i_L0, 0, 1
0x01EA	0x0800      	SUBLW       0
L__ShortToStr163:
0x01EC	0xE219      	BC          L_ShortToStr24
;__Lib_Conversions.c,146 :: 		
0x01EE	0x513A      	MOVF        ShortToStr_i_L0, 0, 1
0x01F0	0x2538      	ADDWF       FARG_ShortToStr_output, 0, 1
0x01F2	0x6EE1      	MOVWF       FSR1L 
0x01F4	0x513B      	MOVF        ShortToStr_i_L0+1, 0, 1
0x01F6	0x2139      	ADDWFC      FARG_ShortToStr_output+1, 0, 1
0x01F8	0x6EE2      	MOVWF       FSR1H 
0x01FA	0x0E01      	MOVLW       1
0x01FC	0x5D3A      	SUBWF       ShortToStr_i_L0, 0, 1
0x01FE	0x6E00      	MOVWF       R0 
0x0200	0x0E00      	MOVLW       0
0x0202	0x593B      	SUBWFB      ShortToStr_i_L0+1, 0, 1
0x0204	0x6E01      	MOVWF       R1 
0x0206	0x5000      	MOVF        R0, 0 
0x0208	0x2538      	ADDWF       FARG_ShortToStr_output, 0, 1
0x020A	0x6EE9      	MOVWF       FSR0L 
0x020C	0x5001      	MOVF        R1, 0 
0x020E	0x2139      	ADDWFC      FARG_ShortToStr_output+1, 0, 1
0x0210	0x6EEA      	MOVWF       FSR0H 
0x0212	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;__Lib_Conversions.c,147 :: 		
0x0216	0x0E01      	MOVLW       1
0x0218	0x5F3A      	SUBWF       ShortToStr_i_L0, 1, 1
0x021A	0x0E00      	MOVLW       0
0x021C	0x5B3B      	SUBWFB      ShortToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,148 :: 		
0x021E	0xD7DF      	BRA         L_ShortToStr23
L_ShortToStr24:
;__Lib_Conversions.c,149 :: 		
0x0220	0xFFE1C138  	MOVFF       FARG_ShortToStr_output, FSR1L
0x0224	0xFFE2C139  	MOVFF       FARG_ShortToStr_output+1, FSR1H
0x0228	0x0E20      	MOVLW       32
0x022A	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,150 :: 		
0x022C	0x513C      	MOVF        ShortToStr_negative_L0, 0, 1
0x022E	0x113D      	IORWF       ShortToStr_negative_L0+1, 0, 1
0x0230	0xE01A      	BZ          L_ShortToStr25
;__Lib_Conversions.c,151 :: 		
0x0232	0x6B3A      	CLRF        ShortToStr_i_L0, 1
0x0234	0x6B3B      	CLRF        ShortToStr_i_L0+1, 1
;__Lib_Conversions.c,152 :: 		
L_ShortToStr26:
0x0236	0x513A      	MOVF        ShortToStr_i_L0, 0, 1
0x0238	0x2538      	ADDWF       FARG_ShortToStr_output, 0, 1
0x023A	0x6EE9      	MOVWF       FSR0L 
0x023C	0x513B      	MOVF        ShortToStr_i_L0+1, 0, 1
0x023E	0x2139      	ADDWFC      FARG_ShortToStr_output+1, 0, 1
0x0240	0x6EEA      	MOVWF       FSR0H 
0x0242	0x50EE      	MOVF        POSTINC0, 0 
0x0244	0x0A20      	XORLW       32
0x0246	0xE103      	BNZ         L_ShortToStr27
;__Lib_Conversions.c,153 :: 		
0x0248	0x4B3A      	INFSNZ      ShortToStr_i_L0, 1, 1
0x024A	0x2B3B      	INCF        ShortToStr_i_L0+1, 1, 1
0x024C	0xD7F4      	BRA         L_ShortToStr26
L_ShortToStr27:
;__Lib_Conversions.c,154 :: 		
0x024E	0x0E01      	MOVLW       1
0x0250	0x5F3A      	SUBWF       ShortToStr_i_L0, 1, 1
0x0252	0x0E00      	MOVLW       0
0x0254	0x5B3B      	SUBWFB      ShortToStr_i_L0+1, 1, 1
;__Lib_Conversions.c,155 :: 		
0x0256	0x513A      	MOVF        ShortToStr_i_L0, 0, 1
0x0258	0x2538      	ADDWF       FARG_ShortToStr_output, 0, 1
0x025A	0x6EE1      	MOVWF       FSR1L 
0x025C	0x513B      	MOVF        ShortToStr_i_L0+1, 0, 1
0x025E	0x2139      	ADDWFC      FARG_ShortToStr_output+1, 0, 1
0x0260	0x6EE2      	MOVWF       FSR1H 
0x0262	0x0E2D      	MOVLW       45
0x0264	0x6EE6      	MOVWF       POSTINC1 
;__Lib_Conversions.c,156 :: 		
L_ShortToStr25:
;__Lib_Conversions.c,157 :: 		
L_end_ShortToStr:
0x0266	0x0012      	RETURN      0
; end of _ShortToStr
_read:
;comunicador_entre_PIC_PC.c,68 :: 		char read(char *mensagem, unsigned char *buf) //retorna 1 se a mensagem for encontrada e zero caso não (no buffer, no caso)
;comunicador_entre_PIC_PC.c,71 :: 		int j = 0;
0x0268	0x0101      	MOVLB       1
0x026A	0x6B3B      	CLRF        read_j_L0, 1
0x026C	0x6B3C      	CLRF        read_j_L0+1, 1
;comunicador_entre_PIC_PC.c,72 :: 		for(i = 0 ; buf[i] != 0x00; i+= 1 + j)
0x026E	0x6A02      	CLRF        R2 
0x0270	0x6A03      	CLRF        R3 
L_read8:
0x0272	0x5002      	MOVF        R2, 0 
0x0274	0x2539      	ADDWF       FARG_read_buf, 0, 1
0x0276	0x6EE9      	MOVWF       FSR0L 
0x0278	0x5003      	MOVF        R3, 0 
0x027A	0x213A      	ADDWFC      FARG_read_buf+1, 0, 1
0x027C	0x6EEA      	MOVWF       FSR0H 
0x027E	0x50EE      	MOVF        POSTINC0, 0 
0x0280	0x0A00      	XORLW       0
0x0282	0xE045      	BZ          L_read9
;comunicador_entre_PIC_PC.c,74 :: 		for(j = 0; mensagem[j] == buf[i+j]; j++)
0x0284	0x6B3B      	CLRF        read_j_L0, 1
0x0286	0x6B3C      	CLRF        read_j_L0+1, 1
L_read11:
0x0288	0x513B      	MOVF        read_j_L0, 0, 1
0x028A	0x2537      	ADDWF       FARG_read_mensagem, 0, 1
0x028C	0x6EE9      	MOVWF       FSR0L 
0x028E	0x513C      	MOVF        read_j_L0+1, 0, 1
0x0290	0x2138      	ADDWFC      FARG_read_mensagem+1, 0, 1
0x0292	0x6EEA      	MOVWF       FSR0H 
0x0294	0x513B      	MOVF        read_j_L0, 0, 1
0x0296	0x2402      	ADDWF       R2, 0 
0x0298	0x6E00      	MOVWF       R0 
0x029A	0x513C      	MOVF        read_j_L0+1, 0, 1
0x029C	0x2003      	ADDWFC      R3, 0 
0x029E	0x6E01      	MOVWF       R1 
0x02A0	0x5000      	MOVF        R0, 0 
0x02A2	0x2539      	ADDWF       FARG_read_buf, 0, 1
0x02A4	0x6ED9      	MOVWF       FSR2L 
0x02A6	0x5001      	MOVF        R1, 0 
0x02A8	0x213A      	ADDWFC      FARG_read_buf+1, 0, 1
0x02AA	0x6EDA      	MOVWF       FSR2H 
0x02AC	0x50EE      	MOVF        POSTINC0, 0 
0x02AE	0x18DE      	XORWF       POSTINC2, 0 
0x02B0	0xE123      	BNZ         L_read12
;comunicador_entre_PIC_PC.c,76 :: 		if(mensagem[j+1] == 0x00)
0x02B2	0x0E01      	MOVLW       1
0x02B4	0x253B      	ADDWF       read_j_L0, 0, 1
0x02B6	0x6E00      	MOVWF       R0 
0x02B8	0x0E00      	MOVLW       0
0x02BA	0x213C      	ADDWFC      read_j_L0+1, 0, 1
0x02BC	0x6E01      	MOVWF       R1 
0x02BE	0x5000      	MOVF        R0, 0 
0x02C0	0x2537      	ADDWF       FARG_read_mensagem, 0, 1
0x02C2	0x6EE9      	MOVWF       FSR0L 
0x02C4	0x5001      	MOVF        R1, 0 
0x02C6	0x2138      	ADDWFC      FARG_read_mensagem+1, 0, 1
0x02C8	0x6EEA      	MOVWF       FSR0H 
0x02CA	0x50EE      	MOVF        POSTINC0, 0 
0x02CC	0x0A00      	XORLW       0
0x02CE	0xE111      	BNZ         L_read14
;comunicador_entre_PIC_PC.c,78 :: 		buf[i+j] = 0xFF;
0x02D0	0x513B      	MOVF        read_j_L0, 0, 1
0x02D2	0x2402      	ADDWF       R2, 0 
0x02D4	0x6E00      	MOVWF       R0 
0x02D6	0x513C      	MOVF        read_j_L0+1, 0, 1
0x02D8	0x2003      	ADDWFC      R3, 0 
0x02DA	0x6E01      	MOVWF       R1 
0x02DC	0x5000      	MOVF        R0, 0 
0x02DE	0x2539      	ADDWF       FARG_read_buf, 0, 1
0x02E0	0x6EE1      	MOVWF       FSR1L 
0x02E2	0x5001      	MOVF        R1, 0 
0x02E4	0x213A      	ADDWFC      FARG_read_buf+1, 0, 1
0x02E6	0x6EE2      	MOVWF       FSR1H 
0x02E8	0x0EFF      	MOVLW       255
0x02EA	0x6EE6      	MOVWF       POSTINC1 
;comunicador_entre_PIC_PC.c,79 :: 		return 1;
0x02EC	0x0E01      	MOVLW       1
0x02EE	0x6E00      	MOVWF       R0 
0x02F0	0xD00F      	BRA         L_end_read
;comunicador_entre_PIC_PC.c,80 :: 		}
L_read14:
;comunicador_entre_PIC_PC.c,74 :: 		for(j = 0; mensagem[j] == buf[i+j]; j++)
0x02F2	0x4B3B      	INFSNZ      read_j_L0, 1, 1
0x02F4	0x2B3C      	INCF        read_j_L0+1, 1, 1
;comunicador_entre_PIC_PC.c,81 :: 		}
0x02F6	0xD7C8      	BRA         L_read11
L_read12:
;comunicador_entre_PIC_PC.c,72 :: 		for(i = 0 ; buf[i] != 0x00; i+= 1 + j)
0x02F8	0x0E01      	MOVLW       1
0x02FA	0x253B      	ADDWF       read_j_L0, 0, 1
0x02FC	0x6E00      	MOVWF       R0 
0x02FE	0x0E00      	MOVLW       0
0x0300	0x213C      	ADDWFC      read_j_L0+1, 0, 1
0x0302	0x6E01      	MOVWF       R1 
0x0304	0x5000      	MOVF        R0, 0 
0x0306	0x2602      	ADDWF       R2, 1 
0x0308	0x5001      	MOVF        R1, 0 
0x030A	0x2203      	ADDWFC      R3, 1 
;comunicador_entre_PIC_PC.c,82 :: 		}
0x030C	0xD7B2      	BRA         L_read8
L_read9:
;comunicador_entre_PIC_PC.c,83 :: 		return 0;
0x030E	0x6A00      	CLRF        R0 
;comunicador_entre_PIC_PC.c,84 :: 		}
L_end_read:
0x0310	0x0012      	RETURN      0
; end of _read
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0312	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0314	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0318	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x031A	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x031C	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x031E	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0320	0x0012      	RETURN      0
; end of ___CC2DW
_loop:
;comunicador_entre_PIC_PC.c,103 :: 		unsigned short loop()
;comunicador_entre_PIC_PC.c,108 :: 		read("esta vivo?") escrever('p', "Estou vivo sim, muito obrigado pela preocupacao!");
0x0322	0x0E4A      	MOVLW       ?lstr1_comunicador_entre_PIC_PC
0x0324	0x0101      	MOVLB       1
0x0326	0x6F37      	MOVWF       FARG_read_mensagem, 1
0x0328	0x0E00      	MOVLW       hi_addr(?lstr1_comunicador_entre_PIC_PC)
0x032A	0x6F38      	MOVWF       FARG_read_mensagem+1, 1
0x032C	0x0EC5      	MOVLW       bufferPc
0x032E	0x6F39      	MOVWF       FARG_read_buf, 1
0x0330	0x0E00      	MOVLW       hi_addr(bufferPc)
0x0332	0x6F3A      	MOVWF       FARG_read_buf+1, 1
0x0334	0xDF99      	RCALL       _read
0x0336	0x5200      	MOVF        R0, 1 
0x0338	0xE007      	BZ          L_loop21
0x033A	0x0E70      	MOVLW       112
0x033C	0x6F37      	MOVWF       FARG_escrever_paraQuem, 1
0x033E	0x0E19      	MOVLW       ?lstr2_comunicador_entre_PIC_PC
0x0340	0x6F38      	MOVWF       FARG_escrever_mensagem, 1
0x0342	0x0E00      	MOVLW       hi_addr(?lstr2_comunicador_entre_PIC_PC)
0x0344	0x6F39      	MOVWF       FARG_escrever_mensagem+1, 1
0x0346	0xDEF6      	RCALL       _escrever
L_loop21:
;comunicador_entre_PIC_PC.c,110 :: 		read("BlocoEnergizado")
0x0348	0x0E55      	MOVLW       ?lstr3_comunicador_entre_PIC_PC
0x034A	0x6F37      	MOVWF       FARG_read_mensagem, 1
0x034C	0x0E00      	MOVLW       hi_addr(?lstr3_comunicador_entre_PIC_PC)
0x034E	0x6F38      	MOVWF       FARG_read_mensagem+1, 1
0x0350	0x0EC5      	MOVLW       bufferPc
0x0352	0x6F39      	MOVWF       FARG_read_buf, 1
0x0354	0x0E00      	MOVLW       hi_addr(bufferPc)
0x0356	0x6F3A      	MOVWF       FARG_read_buf+1, 1
0x0358	0xDF87      	RCALL       _read
0x035A	0x5200      	MOVF        R0, 1 
0x035C	0xE010      	BZ          L_loop22
;comunicador_entre_PIC_PC.c,112 :: 		TRISB = 0x00;
0x035E	0x6A93      	CLRF        TRISB 
;comunicador_entre_PIC_PC.c,113 :: 		PORTB = 0xFF;
0x0360	0x0EFF      	MOVLW       255
0x0362	0x6E81      	MOVWF       PORTB 
;comunicador_entre_PIC_PC.c,114 :: 		delay_ms(1000);
0x0364	0x0E28      	MOVLW       40
0x0366	0x6E0B      	MOVWF       R11, 0
0x0368	0x0E51      	MOVLW       81
0x036A	0x6E0C      	MOVWF       R12, 0
0x036C	0x0ED3      	MOVLW       211
0x036E	0x6E0D      	MOVWF       R13, 0
L_loop23:
0x0370	0x2E0D      	DECFSZ      R13, 1, 0
0x0372	0xD7FE      	BRA         L_loop23
0x0374	0x2E0C      	DECFSZ      R12, 1, 0
0x0376	0xD7FC      	BRA         L_loop23
0x0378	0x2E0B      	DECFSZ      R11, 1, 0
0x037A	0xD7FA      	BRA         L_loop23
;comunicador_entre_PIC_PC.c,115 :: 		PORTB = 0x00;
0x037C	0x6A81      	CLRF        PORTB 
;comunicador_entre_PIC_PC.c,116 :: 		}
L_loop22:
;comunicador_entre_PIC_PC.c,118 :: 		read("relatorio")
0x037E	0x0E99      	MOVLW       ?lstr4_comunicador_entre_PIC_PC
0x0380	0x6F37      	MOVWF       FARG_read_mensagem, 1
0x0382	0x0E00      	MOVLW       hi_addr(?lstr4_comunicador_entre_PIC_PC)
0x0384	0x6F38      	MOVWF       FARG_read_mensagem+1, 1
0x0386	0x0EC5      	MOVLW       bufferPc
0x0388	0x6F39      	MOVWF       FARG_read_buf, 1
0x038A	0x0E00      	MOVLW       hi_addr(bufferPc)
0x038C	0x6F3A      	MOVWF       FARG_read_buf+1, 1
0x038E	0xDF6C      	RCALL       _read
0x0390	0x5200      	MOVF        R0, 1 
0x0392	0xE007      	BZ          L_loop24
;comunicador_entre_PIC_PC.c,120 :: 		escrever('p', "Autor: Henrique Mauler Borges");
0x0394	0x0E70      	MOVLW       112
0x0396	0x6F37      	MOVWF       FARG_escrever_paraQuem, 1
0x0398	0x0EA3      	MOVLW       ?lstr5_comunicador_entre_PIC_PC
0x039A	0x6F38      	MOVWF       FARG_escrever_mensagem, 1
0x039C	0x0E00      	MOVLW       hi_addr(?lstr5_comunicador_entre_PIC_PC)
0x039E	0x6F39      	MOVWF       FARG_escrever_mensagem+1, 1
0x03A0	0xDEC9      	RCALL       _escrever
;comunicador_entre_PIC_PC.c,121 :: 		}
L_loop24:
;comunicador_entre_PIC_PC.c,123 :: 		read("Qual a sua frequencia?")
0x03A2	0x0E65      	MOVLW       ?lstr6_comunicador_entre_PIC_PC
0x03A4	0x6F37      	MOVWF       FARG_read_mensagem, 1
0x03A6	0x0E00      	MOVLW       hi_addr(?lstr6_comunicador_entre_PIC_PC)
0x03A8	0x6F38      	MOVWF       FARG_read_mensagem+1, 1
0x03AA	0x0EC5      	MOVLW       bufferPc
0x03AC	0x6F39      	MOVWF       FARG_read_buf, 1
0x03AE	0x0E00      	MOVLW       hi_addr(bufferPc)
0x03B0	0x6F3A      	MOVWF       FARG_read_buf+1, 1
0x03B2	0xDF5A      	RCALL       _read
0x03B4	0x5200      	MOVF        R0, 1 
0x03B6	0xE017      	BZ          L_loop25
;comunicador_entre_PIC_PC.c,126 :: 		unsigned short clock = Clock_MHz();
0x03B8	0x0E1F      	MOVLW       31
0x03BA	0x6F36      	MOVWF       loop_clock_L1, 1
;comunicador_entre_PIC_PC.c,127 :: 		ShortToStr(clock, saidaclock);
0x03BC	0xF137C136  	MOVFF       loop_clock_L1, FARG_ShortToStr_input
0x03C0	0x0E2C      	MOVLW       loop_saidaclock_L1
0x03C2	0x6F38      	MOVWF       FARG_ShortToStr_output, 1
0x03C4	0x0E01      	MOVLW       hi_addr(loop_saidaclock_L1)
0x03C6	0x6F39      	MOVWF       FARG_ShortToStr_output+1, 1
0x03C8	0xDEE5      	RCALL       _ShortToStr
;comunicador_entre_PIC_PC.c,129 :: 		escrever('p', "A frequencia de trabalho é: ");
0x03CA	0x0E70      	MOVLW       112
0x03CC	0x6F37      	MOVWF       FARG_escrever_paraQuem, 1
0x03CE	0x0E7C      	MOVLW       ?lstr7_comunicador_entre_PIC_PC
0x03D0	0x6F38      	MOVWF       FARG_escrever_mensagem, 1
0x03D2	0x0E00      	MOVLW       hi_addr(?lstr7_comunicador_entre_PIC_PC)
0x03D4	0x6F39      	MOVWF       FARG_escrever_mensagem+1, 1
0x03D6	0xDEAE      	RCALL       _escrever
;comunicador_entre_PIC_PC.c,130 :: 		escrever('p', saidaclock);
0x03D8	0x0E70      	MOVLW       112
0x03DA	0x6F37      	MOVWF       FARG_escrever_paraQuem, 1
0x03DC	0x0E2C      	MOVLW       loop_saidaclock_L1
0x03DE	0x6F38      	MOVWF       FARG_escrever_mensagem, 1
0x03E0	0x0E01      	MOVLW       hi_addr(loop_saidaclock_L1)
0x03E2	0x6F39      	MOVWF       FARG_escrever_mensagem+1, 1
0x03E4	0xDEA7      	RCALL       _escrever
;comunicador_entre_PIC_PC.c,135 :: 		}
L_loop25:
;comunicador_entre_PIC_PC.c,147 :: 		}
L_end_loop:
0x03E6	0x0012      	RETURN      0
; end of _loop
_main:
0x03E8	0xF002ECDD  	CALL        1466, 0
;comunicador_entre_PIC_PC.c,168 :: 		void main()
;comunicador_entre_PIC_PC.c,173 :: 		TXSTA1.BRGH = 1; //Habilita o Intenso Baundrate (usa dois registradores para realiar a contagem de bits por segundo)
0x03EC	0x84AC      	BSF         TXSTA1, 2 
;comunicador_entre_PIC_PC.c,174 :: 		BAUDCON1.BRG16 = 1; //Contador utiliza os dezesseis bits (o registrador SPBRG1 é utilizado caso esteja em um,e descarta o SPBRGH1 quando esta em zero)
0x03EE	0x86B8      	BSF         BAUDCON1, 3 
;comunicador_entre_PIC_PC.c,175 :: 		SPBRGH1 = 0x00;
0x03F0	0x6AB0      	CLRF        SPBRGH1 
;comunicador_entre_PIC_PC.c,176 :: 		SPBRG1 = 0x41; //baundrate configurado para 115200 (utilizando uma frequencia de aproxidamente 35MHz);
0x03F2	0x0E41      	MOVLW       65
0x03F4	0x6EAF      	MOVWF       SPBRG1 
;comunicador_entre_PIC_PC.c,178 :: 		TXSTA2.BRGH = 1; //Desabilita o Intenso Baundrate
0x03F6	0x8472      	BSF         TXSTA2, 2 
;comunicador_entre_PIC_PC.c,179 :: 		BAUDCON2.BRG16 = 1; //Contador utiliza os dezesseis bits (o registrador SPBRG1 é utilizado,e descarta o SPBRGH1 quando esta em zero)
0x03F8	0x8670      	BSF         BAUDCON2, 3 
;comunicador_entre_PIC_PC.c,180 :: 		SPBRGH2 = 0x00;
0x03FA	0x6A76      	CLRF        SPBRGH2 
;comunicador_entre_PIC_PC.c,181 :: 		SPBRG2 = 0x45; //baundrate configurado para (utilizando uma frequencia de aproxidamente 35MHz);
0x03FC	0x0E45      	MOVLW       69
0x03FE	0x6E75      	MOVWF       SPBRG2 
;comunicador_entre_PIC_PC.c,184 :: 		TRISB = 0x00;
0x0400	0x6A93      	CLRF        TRISB 
;comunicador_entre_PIC_PC.c,185 :: 		TRISC = 0xFF; //os dois registradores acima possuem pinos referentes ao EUSART1 e EUSART2, respectivamente e devem ser setados como saída
0x0402	0x0EFF      	MOVLW       255
0x0404	0x6E94      	MOVWF       TRISC 
;comunicador_entre_PIC_PC.c,186 :: 		TRISD = 0xFF;
0x0406	0x0EFF      	MOVLW       255
0x0408	0x6E95      	MOVWF       TRISD 
;comunicador_entre_PIC_PC.c,187 :: 		PORTB = 0x00;
0x040A	0x6A81      	CLRF        PORTB 
;comunicador_entre_PIC_PC.c,190 :: 		TXSTA1.SYNC = 0;  //modo assincrono
0x040C	0x98AC      	BCF         TXSTA1, 4 
;comunicador_entre_PIC_PC.c,191 :: 		RCSTA1.SPEN = 1;  //liga a eusart
0x040E	0x8EAB      	BSF         RCSTA1, 7 
;comunicador_entre_PIC_PC.c,192 :: 		TXSTA1.TXEN = 1;  //liga o circuito transmissor
0x0410	0x8AAC      	BSF         TXSTA1, 5 
;comunicador_entre_PIC_PC.c,193 :: 		TX1IE_bit = 0;    //flag do receptor setado para zero pois não será utilizado a interrupção por envio de dados
0x0412	0x989D      	BCF         TX1IE_bit, BitPos(TX1IE_bit+0) 
;comunicador_entre_PIC_PC.c,194 :: 		ANSELB = 0x00;
0x0414	0x010F      	MOVLB       15
0x0416	0x6B39      	CLRF        ANSELB, 1
;comunicador_entre_PIC_PC.c,195 :: 		ANSELC = 0x00;
0x0418	0x6B3A      	CLRF        ANSELC, 1
;comunicador_entre_PIC_PC.c,197 :: 		TXSTA2.SYNC = 0;  //modo assincrono
0x041A	0x9872      	BCF         TXSTA2, 4 
;comunicador_entre_PIC_PC.c,198 :: 		RCSTA2.SPEN = 1;  //liga a eusart
0x041C	0x8E71      	BSF         RCSTA2, 7 
;comunicador_entre_PIC_PC.c,199 :: 		TXSTA2.TXEN = 1;  //liga o circuito transmissor
0x041E	0x8A72      	BSF         TXSTA2, 5 
;comunicador_entre_PIC_PC.c,200 :: 		TX2IE_bit = 0;    //flag do receptor setado para zero pois não será utilizado a interrupção por envio de dados
0x0420	0x98A3      	BCF         TX2IE_bit, BitPos(TX2IE_bit+0) 
;comunicador_entre_PIC_PC.c,201 :: 		ANSELD = 0x00;    //Os registrador Analogico-Digital devem estar desabilitado para que a comunicação funcione (ANSELB para o EUSART1 e ANSELC para EUSART2
0x0422	0x6B3B      	CLRF        ANSELD, 1
;comunicador_entre_PIC_PC.c,205 :: 		RCSTA1.CREN = 1; //similar ao spen. Habilita o circuito
0x0424	0x88AB      	BSF         RCSTA1, 4 
;comunicador_entre_PIC_PC.c,208 :: 		while(PIR1.RC1IF) {RCREG1;} //para limpar o buffer. Uma precaução antes de iniciar o programa. Enquanto houver dados no buffer, lê-los.
L_main29:
0x0426	0xAA9E      	BTFSS       PIR1, 5 
0x0428	0xD001      	BRA         L_main30
0x042A	0xD7FD      	BRA         L_main29
L_main30:
;comunicador_entre_PIC_PC.c,210 :: 		RCSTA2.CREN = 1; //similar ao spen. Habilita o circuito
0x042C	0x8871      	BSF         RCSTA2, 4 
;comunicador_entre_PIC_PC.c,213 :: 		while(PIR3.RC2IF) {RCREG2;} //para limpar o buffer. Uma precaução antes de iniciar o programa. Enquanto houver dados no buffer, lê-los.
L_main31:
0x042E	0xAAA4      	BTFSS       PIR3, 5 
0x0430	0xD001      	BRA         L_main32
0x0432	0xD7FD      	BRA         L_main31
L_main32:
;comunicador_entre_PIC_PC.c,217 :: 		INTCON.GIE = 0x01;  //habilita a interrupção global
0x0434	0x8EF2      	BSF         INTCON, 7 
;comunicador_entre_PIC_PC.c,218 :: 		INTCON.PEIE = 0x01; //habilita a interrupção por periférico
0x0436	0x8CF2      	BSF         INTCON, 6 
;comunicador_entre_PIC_PC.c,219 :: 		RCON.IPEN = 0x01; //interrupção por prioridades habilitado (significa que poderá haver interrupção de alto nível e baixo nível no programa)
0x0438	0x8ED0      	BSF         RCON, 7 
;comunicador_entre_PIC_PC.c,221 :: 		IPR1.RC1IP = 0x01;         //recepção de dados (RX) possui interrupção de baixa prioridade
0x043A	0x8A9F      	BSF         IPR1, 5 
;comunicador_entre_PIC_PC.c,222 :: 		IPR1.TX1IP = 0x01;         //tranmissao possui interrupção de baixa prioridade
0x043C	0x889F      	BSF         IPR1, 4 
;comunicador_entre_PIC_PC.c,223 :: 		PIR1.TX1IF = 0x00;            //flag setada para um toda vez que a transmissão eusart estiver habilitada e não houver dados sendo segurados no TXREG. é apenas zero quando o registrador tsr esta ocupado com um byte e um byte está a espara para a tranmissão em txreg
0x043E	0x989E      	BCF         PIR1, 4 
;comunicador_entre_PIC_PC.c,224 :: 		PIE1.TX1IE = 0x00;            //desabilita interrupção por tx
0x0440	0x989D      	BCF         PIE1, 4 
;comunicador_entre_PIC_PC.c,225 :: 		PIR1.RC1IF = 0x00;            //flag setada para um enquanto houver dados para receber e tratar
0x0442	0x9A9E      	BCF         PIR1, 5 
;comunicador_entre_PIC_PC.c,226 :: 		PIE1.RC1IE = 0x01;            // habilita a interrpção por rx
0x0444	0x8A9D      	BSF         PIE1, 5 
;comunicador_entre_PIC_PC.c,228 :: 		IPR3.RC2IP = 0x01;         //recepção de dados (RX) possui interrupção de alta prioridade
0x0446	0x8AA5      	BSF         IPR3, 5 
;comunicador_entre_PIC_PC.c,229 :: 		IPR3.TX2IP = 0x01;         //tranmissao possui interrupção de alta prioridade
0x0448	0x88A5      	BSF         IPR3, 4 
;comunicador_entre_PIC_PC.c,230 :: 		PIR3.TX2IF = 0x00;            //flag setada para um toda vez que a transmissão eusart estiver habilitada e não houver dados sendo segurados no TXREG. é apenas zero quando o registrador tsr esta ocupado com um byte e um byte está a espara para a tranmissão em txreg
0x044A	0x98A4      	BCF         PIR3, 4 
;comunicador_entre_PIC_PC.c,231 :: 		PIE3.TX2IE = 0x00;            //desabilita interrupção por tx
0x044C	0x98A3      	BCF         PIE3, 4 
;comunicador_entre_PIC_PC.c,232 :: 		PIR3.RC2IF = 0x00;            //flag setada para um enquanto houver dados para receber e tratar
0x044E	0x9AA4      	BCF         PIR3, 5 
;comunicador_entre_PIC_PC.c,233 :: 		PIE3.RC2IE = 0x01;            // habilita a interrpção por rx
0x0450	0x8AA3      	BSF         PIE3, 5 
;comunicador_entre_PIC_PC.c,236 :: 		PIR5.TMR6IF = 0;
0x0452	0x947E      	BCF         PIR5, 2 
;comunicador_entre_PIC_PC.c,237 :: 		PIR5.TMR4IF = 0;
0x0454	0x907E      	BCF         PIR5, 0 
;comunicador_entre_PIC_PC.c,240 :: 		IPR5.TMR6IP = 0;
0x0456	0x947F      	BCF         IPR5, 2 
;comunicador_entre_PIC_PC.c,241 :: 		IPR5.TMR4IP = 0;
0x0458	0x907F      	BCF         IPR5, 0 
;comunicador_entre_PIC_PC.c,242 :: 		TMR6 = 0;
0x045A	0x6B4C      	CLRF        TMR6, 1
;comunicador_entre_PIC_PC.c,243 :: 		TMR4 = 0;
0x045C	0x6B53      	CLRF        TMR4, 1
;comunicador_entre_PIC_PC.c,244 :: 		T6CON = 0b01111011; //os valores do timer ainda devem ser ajustados corretamente
0x045E	0x0E7B      	MOVLW       123
0x0460	0x6F4A      	MOVWF       T6CON, 1
;comunicador_entre_PIC_PC.c,245 :: 		T4CON = 0b00111001; //define um tempo para 10 ms (pode estar errao por hora) considerando uma entrada de 136 vezes na interrupção  e uma frequencia d 31MHz
0x0462	0x0E39      	MOVLW       57
0x0464	0x6F51      	MOVWF       T4CON, 1
;comunicador_entre_PIC_PC.c,246 :: 		T6CON.TMR6ON = 0;
0x0466	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,247 :: 		T6CON.TMR4ON = 0;
0x0468	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,251 :: 		for(i = 0; i < tamanhoBuffer;i++) bufferPc[i] = bufferModulo[i] = 0xFF;
0x046A	0x0101      	MOVLB       1
0x046C	0x6B2A      	CLRF        main_i_L0, 1
0x046E	0x6B2B      	CLRF        main_i_L0+1, 1
L_main33:
0x0470	0x0E80      	MOVLW       128
0x0472	0x192B      	XORWF       main_i_L0+1, 0, 1
0x0474	0x6E00      	MOVWF       R0 
0x0476	0x0E80      	MOVLW       128
0x0478	0x5C00      	SUBWF       R0, 0 
0x047A	0xE102      	BNZ         L__main54
0x047C	0x0E32      	MOVLW       50
0x047E	0x5D2A      	SUBWF       main_i_L0, 0, 1
L__main54:
0x0480	0xE21F      	BC          L_main34
0x0482	0x0EC5      	MOVLW       bufferPc
0x0484	0x252A      	ADDWF       main_i_L0, 0, 1
0x0486	0x6E02      	MOVWF       R2 
0x0488	0x0E00      	MOVLW       hi_addr(bufferPc)
0x048A	0x212B      	ADDWFC      main_i_L0+1, 0, 1
0x048C	0x6E03      	MOVWF       R3 
0x048E	0x0EF7      	MOVLW       bufferModulo
0x0490	0x252A      	ADDWF       main_i_L0, 0, 1
0x0492	0x6E00      	MOVWF       R0 
0x0494	0x0E00      	MOVLW       hi_addr(bufferModulo)
0x0496	0x212B      	ADDWFC      main_i_L0+1, 0, 1
0x0498	0x6E01      	MOVWF       R1 
0x049A	0xFFE1C000  	MOVFF       R0, FSR1L
0x049E	0xFFE2C001  	MOVFF       R1, FSR1H
0x04A2	0x0EFF      	MOVLW       255
0x04A4	0x6EE6      	MOVWF       POSTINC1 
0x04A6	0xFFE9C000  	MOVFF       R0, FSR0L
0x04AA	0xFFEAC001  	MOVFF       R1, FSR0H
0x04AE	0xFFE1C002  	MOVFF       R2, FSR1L
0x04B2	0xFFE2C003  	MOVFF       R3, FSR1H
0x04B6	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x04BA	0x4B2A      	INFSNZ      main_i_L0, 1, 1
0x04BC	0x2B2B      	INCF        main_i_L0+1, 1, 1
0x04BE	0xD7D8      	BRA         L_main33
L_main34:
;comunicador_entre_PIC_PC.c,255 :: 		posBufferPc = 0;
0x04C0	0x0100      	MOVLB       0
0x04C2	0x6BC3      	CLRF        _posBufferPc, 1
0x04C4	0x6BC4      	CLRF        _posBufferPc+1, 1
;comunicador_entre_PIC_PC.c,256 :: 		posBufferModulo = 0;
0x04C6	0x6BC1      	CLRF        _posBufferModulo, 1
0x04C8	0x6BC2      	CLRF        _posBufferModulo+1, 1
;comunicador_entre_PIC_PC.c,257 :: 		PORTB = 0x00;
0x04CA	0x6A81      	CLRF        PORTB 
;comunicador_entre_PIC_PC.c,258 :: 		while(1)
L_main36:
;comunicador_entre_PIC_PC.c,260 :: 		retorno = loop();
0x04CC	0xDF2A      	RCALL       _loop
0x04CE	0xF129C000  	MOVFF       R0, _retorno
;comunicador_entre_PIC_PC.c,261 :: 		if(PIR5.TMR6IF)
0x04D2	0xA47E      	BTFSS       PIR5, 2 
0x04D4	0xD01A      	BRA         L_main38
;comunicador_entre_PIC_PC.c,263 :: 		PIR5.TMR6IF = 0;
0x04D6	0x947E      	BCF         PIR5, 2 
;comunicador_entre_PIC_PC.c,264 :: 		T6CON.TMR6ON = 0;
0x04D8	0x010F      	MOVLB       15
0x04DA	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,265 :: 		if(posBufferPc > offset + 5)   //chance de corrupção de dados
0x04DC	0x0E80      	MOVLW       128
0x04DE	0x6E00      	MOVWF       R0 
0x04E0	0x0E80      	MOVLW       128
0x04E2	0x0100      	MOVLB       0
0x04E4	0x19C4      	XORWF       _posBufferPc+1, 0, 1
0x04E6	0x5C00      	SUBWF       R0, 0 
0x04E8	0xE102      	BNZ         L__main55
0x04EA	0x51C3      	MOVF        _posBufferPc, 0, 1
0x04EC	0x0826      	SUBLW       38
L__main55:
0x04EE	0xE202      	BC          L_main39
;comunicador_entre_PIC_PC.c,267 :: 		posBufferPc = 0;
0x04F0	0x6BC3      	CLRF        _posBufferPc, 1
0x04F2	0x6BC4      	CLRF        _posBufferPc+1, 1
;comunicador_entre_PIC_PC.c,268 :: 		}
L_main39:
;comunicador_entre_PIC_PC.c,269 :: 		if(posBufferModulo > offset)
0x04F4	0x0E80      	MOVLW       128
0x04F6	0x6E00      	MOVWF       R0 
0x04F8	0x0E80      	MOVLW       128
0x04FA	0x19C2      	XORWF       _posBufferModulo+1, 0, 1
0x04FC	0x5C00      	SUBWF       R0, 0 
0x04FE	0xE102      	BNZ         L__main56
0x0500	0x51C1      	MOVF        _posBufferModulo, 0, 1
0x0502	0x0821      	SUBLW       33
L__main56:
0x0504	0xE202      	BC          L_main40
;comunicador_entre_PIC_PC.c,271 :: 		posBufferModulo = 0;
0x0506	0x6BC1      	CLRF        _posBufferModulo, 1
0x0508	0x6BC2      	CLRF        _posBufferModulo+1, 1
;comunicador_entre_PIC_PC.c,272 :: 		}
L_main40:
;comunicador_entre_PIC_PC.c,275 :: 		}
L_main38:
;comunicador_entre_PIC_PC.c,276 :: 		}
0x050A	0xD7E0      	BRA         L_main36
;comunicador_entre_PIC_PC.c,277 :: 		}
L_end_main:
0x050C	0xD7FF      	BRA         $+0
; end of _main
0x05BA	0xF019EE10  	LFSR        1, 25
0x05BE	0x0EAC      	MOVLW       172
0x05C0	0x6E00      	MOVWF       R0 
0x05C2	0x0E01      	MOVLW       1
0x05C4	0x6E01      	MOVWF       R1 
0x05C6	0x0E0E      	MOVLW       14
0x05C8	0x6EF6      	MOVWF       4086 
0x05CA	0x0E05      	MOVLW       5
0x05CC	0x6EF7      	MOVWF       TBLPTRH 
0x05CE	0x0E00      	MOVLW       0
0x05D0	0x6EF8      	MOVWF       TBLPTRU 
0x05D2	0xF001EC89  	CALL        786, 0
0x05D6	0x0012      	RETURN      0
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr2_comunicador_entre_PIC_PC
0x050E	0x7345 ;?ICS?lstr2_comunicador_entre_PIC_PC+0
0x0510	0x6F74 ;?ICS?lstr2_comunicador_entre_PIC_PC+2
0x0512	0x2075 ;?ICS?lstr2_comunicador_entre_PIC_PC+4
0x0514	0x6976 ;?ICS?lstr2_comunicador_entre_PIC_PC+6
0x0516	0x6F76 ;?ICS?lstr2_comunicador_entre_PIC_PC+8
0x0518	0x7320 ;?ICS?lstr2_comunicador_entre_PIC_PC+10
0x051A	0x6D69 ;?ICS?lstr2_comunicador_entre_PIC_PC+12
0x051C	0x202C ;?ICS?lstr2_comunicador_entre_PIC_PC+14
0x051E	0x756D ;?ICS?lstr2_comunicador_entre_PIC_PC+16
0x0520	0x7469 ;?ICS?lstr2_comunicador_entre_PIC_PC+18
0x0522	0x206F ;?ICS?lstr2_comunicador_entre_PIC_PC+20
0x0524	0x626F ;?ICS?lstr2_comunicador_entre_PIC_PC+22
0x0526	0x6972 ;?ICS?lstr2_comunicador_entre_PIC_PC+24
0x0528	0x6167 ;?ICS?lstr2_comunicador_entre_PIC_PC+26
0x052A	0x6F64 ;?ICS?lstr2_comunicador_entre_PIC_PC+28
0x052C	0x7020 ;?ICS?lstr2_comunicador_entre_PIC_PC+30
0x052E	0x6C65 ;?ICS?lstr2_comunicador_entre_PIC_PC+32
0x0530	0x2061 ;?ICS?lstr2_comunicador_entre_PIC_PC+34
0x0532	0x7270 ;?ICS?lstr2_comunicador_entre_PIC_PC+36
0x0534	0x6F65 ;?ICS?lstr2_comunicador_entre_PIC_PC+38
0x0536	0x7563 ;?ICS?lstr2_comunicador_entre_PIC_PC+40
0x0538	0x6170 ;?ICS?lstr2_comunicador_entre_PIC_PC+42
0x053A	0x6163 ;?ICS?lstr2_comunicador_entre_PIC_PC+44
0x053C	0x216F ;?ICS?lstr2_comunicador_entre_PIC_PC+46
0x053E	0x00 ;?ICS?lstr2_comunicador_entre_PIC_PC+48
; end of ?ICS?lstr2_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr1_comunicador_entre_PIC_PC
0x053F	0x7365 ;?ICS?lstr1_comunicador_entre_PIC_PC+0
0x0541	0x6174 ;?ICS?lstr1_comunicador_entre_PIC_PC+2
0x0543	0x7620 ;?ICS?lstr1_comunicador_entre_PIC_PC+4
0x0545	0x7669 ;?ICS?lstr1_comunicador_entre_PIC_PC+6
0x0547	0x3F6F ;?ICS?lstr1_comunicador_entre_PIC_PC+8
0x0549	0x00 ;?ICS?lstr1_comunicador_entre_PIC_PC+10
; end of ?ICS?lstr1_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr3_comunicador_entre_PIC_PC
0x054A	0x6C42 ;?ICS?lstr3_comunicador_entre_PIC_PC+0
0x054C	0x636F ;?ICS?lstr3_comunicador_entre_PIC_PC+2
0x054E	0x456F ;?ICS?lstr3_comunicador_entre_PIC_PC+4
0x0550	0x656E ;?ICS?lstr3_comunicador_entre_PIC_PC+6
0x0552	0x6772 ;?ICS?lstr3_comunicador_entre_PIC_PC+8
0x0554	0x7A69 ;?ICS?lstr3_comunicador_entre_PIC_PC+10
0x0556	0x6461 ;?ICS?lstr3_comunicador_entre_PIC_PC+12
0x0558	0x006F ;?ICS?lstr3_comunicador_entre_PIC_PC+14
; end of ?ICS?lstr3_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr6_comunicador_entre_PIC_PC
0x055A	0x7551 ;?ICS?lstr6_comunicador_entre_PIC_PC+0
0x055C	0x6C61 ;?ICS?lstr6_comunicador_entre_PIC_PC+2
0x055E	0x6120 ;?ICS?lstr6_comunicador_entre_PIC_PC+4
0x0560	0x7320 ;?ICS?lstr6_comunicador_entre_PIC_PC+6
0x0562	0x6175 ;?ICS?lstr6_comunicador_entre_PIC_PC+8
0x0564	0x6620 ;?ICS?lstr6_comunicador_entre_PIC_PC+10
0x0566	0x6572 ;?ICS?lstr6_comunicador_entre_PIC_PC+12
0x0568	0x7571 ;?ICS?lstr6_comunicador_entre_PIC_PC+14
0x056A	0x6E65 ;?ICS?lstr6_comunicador_entre_PIC_PC+16
0x056C	0x6963 ;?ICS?lstr6_comunicador_entre_PIC_PC+18
0x056E	0x3F61 ;?ICS?lstr6_comunicador_entre_PIC_PC+20
0x0570	0x00 ;?ICS?lstr6_comunicador_entre_PIC_PC+22
; end of ?ICS?lstr6_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr7_comunicador_entre_PIC_PC
0x0571	0x2041 ;?ICS?lstr7_comunicador_entre_PIC_PC+0
0x0573	0x7266 ;?ICS?lstr7_comunicador_entre_PIC_PC+2
0x0575	0x7165 ;?ICS?lstr7_comunicador_entre_PIC_PC+4
0x0577	0x6575 ;?ICS?lstr7_comunicador_entre_PIC_PC+6
0x0579	0x636E ;?ICS?lstr7_comunicador_entre_PIC_PC+8
0x057B	0x6169 ;?ICS?lstr7_comunicador_entre_PIC_PC+10
0x057D	0x6420 ;?ICS?lstr7_comunicador_entre_PIC_PC+12
0x057F	0x2065 ;?ICS?lstr7_comunicador_entre_PIC_PC+14
0x0581	0x7274 ;?ICS?lstr7_comunicador_entre_PIC_PC+16
0x0583	0x6261 ;?ICS?lstr7_comunicador_entre_PIC_PC+18
0x0585	0x6C61 ;?ICS?lstr7_comunicador_entre_PIC_PC+20
0x0587	0x6F68 ;?ICS?lstr7_comunicador_entre_PIC_PC+22
0x0589	0xE920 ;?ICS?lstr7_comunicador_entre_PIC_PC+24
0x058B	0x203A ;?ICS?lstr7_comunicador_entre_PIC_PC+26
0x058D	0x00 ;?ICS?lstr7_comunicador_entre_PIC_PC+28
; end of ?ICS?lstr7_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr4_comunicador_entre_PIC_PC
0x058E	0x6572 ;?ICS?lstr4_comunicador_entre_PIC_PC+0
0x0590	0x616C ;?ICS?lstr4_comunicador_entre_PIC_PC+2
0x0592	0x6F74 ;?ICS?lstr4_comunicador_entre_PIC_PC+4
0x0594	0x6972 ;?ICS?lstr4_comunicador_entre_PIC_PC+6
0x0596	0x006F ;?ICS?lstr4_comunicador_entre_PIC_PC+8
; end of ?ICS?lstr4_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr5_comunicador_entre_PIC_PC
0x0598	0x7541 ;?ICS?lstr5_comunicador_entre_PIC_PC+0
0x059A	0x6F74 ;?ICS?lstr5_comunicador_entre_PIC_PC+2
0x059C	0x3A72 ;?ICS?lstr5_comunicador_entre_PIC_PC+4
0x059E	0x4820 ;?ICS?lstr5_comunicador_entre_PIC_PC+6
0x05A0	0x6E65 ;?ICS?lstr5_comunicador_entre_PIC_PC+8
0x05A2	0x6972 ;?ICS?lstr5_comunicador_entre_PIC_PC+10
0x05A4	0x7571 ;?ICS?lstr5_comunicador_entre_PIC_PC+12
0x05A6	0x2065 ;?ICS?lstr5_comunicador_entre_PIC_PC+14
0x05A8	0x614D ;?ICS?lstr5_comunicador_entre_PIC_PC+16
0x05AA	0x6C75 ;?ICS?lstr5_comunicador_entre_PIC_PC+18
0x05AC	0x7265 ;?ICS?lstr5_comunicador_entre_PIC_PC+20
0x05AE	0x4220 ;?ICS?lstr5_comunicador_entre_PIC_PC+22
0x05B0	0x726F ;?ICS?lstr5_comunicador_entre_PIC_PC+24
0x05B2	0x6567 ;?ICS?lstr5_comunicador_entre_PIC_PC+26
0x05B4	0x0073 ;?ICS?lstr5_comunicador_entre_PIC_PC+28
; end of ?ICS?lstr5_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS_posBufferModulo
0x05B6	0x0000 ;?ICS_posBufferModulo+0
; end of ?ICS_posBufferModulo
;comunicador_entre_PIC_PC.c,0 :: ?ICS_posBufferPc
0x05B8	0x0000 ;?ICS_posBufferPc+0
; end of ?ICS_posBufferPc
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [154]    _interrupt
0x00A2      [30]    _Div_8X8_U
0x00C0     [116]    _ByteToStr
0x0134      [96]    _escrever
0x0194     [212]    _ShortToStr
0x0268     [170]    _read
0x0312      [16]    ___CC2DW
0x0322     [198]    _loop
0x03E8     [294]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    R0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    R1
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [2]    escrever_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    __Lib_FT810_alt_memcpy_dd_L0
0x0002       [2]    __Lib_FT810_alt_memset_pp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0002       [2]    __Lib_FT810_alt_strlen_cp_L0
0x0002       [2]    __Lib_FT800_alt_memset_pp_L0
0x0002       [2]    __Lib_FT800_alt_strlen_cp_L0
0x0002       [2]    __Lib_FT800_alt_memcpy_dd_L0
0x0002       [2]    __Lib_FT812_alt_strlen_cp_L0
0x0002       [2]    read_i_L0
0x0002       [1]    R2
0x0002       [2]    strlen_cp_L0
0x0002       [2]    __Lib_FT812_alt_memset_pp_L0
0x0002       [2]    __Lib_FT812_alt_memcpy_dd_L0
0x0003       [1]    R3
0x0003       [4]    FT800_Canvas_SurrRect_minX_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    escrever_regSend_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [4]    FT812_Canvas_SurrRect_minX_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [4]    FT810_Canvas_SurrRect_minX_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    frexp_pom_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    strcat_cp_L0
0x0004       [3]    __Lib_FT810_alt_strlen_const_cp_L0
0x0004       [1]    R4
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [3]    __Lib_FT812_alt_strlen_const_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    __Lib_FT812_alt_memcpy_ss_L0
0x0004       [2]    __Lib_FT810_alt_memcpy_ss_L0
0x0004       [2]    __Lib_FT800_alt_memcpy_ss_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [3]    __Lib_FT800_alt_strlen_const_cp_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    R6
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0007       [4]    FT810_Canvas_SurrRect_minY_L0
0x0007       [4]    FT812_Canvas_SurrRect_minY_L0
0x0007       [4]    FT800_Canvas_SurrRect_minY_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x000A       [1]    R10
0x000B       [4]    FT812_Canvas_SurrRect_maxX_L0
0x000B       [1]    R11
0x000B       [4]    FT810_Canvas_SurrRect_maxX_L0
0x000B       [4]    FT800_Canvas_SurrRect_maxX_L0
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x000F       [4]    FT810_Canvas_SurrRect_maxY_L0
0x000F       [4]    FT812_Canvas_SurrRect_maxY_L0
0x000F       [4]    FT800_Canvas_SurrRect_maxY_L0
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019      [49]    ?lstr2_comunicador_entre_PIC_PC
0x004A      [11]    ?lstr1_comunicador_entre_PIC_PC
0x0055      [16]    ?lstr3_comunicador_entre_PIC_PC
0x0065      [23]    ?lstr6_comunicador_entre_PIC_PC
0x007C      [29]    ?lstr7_comunicador_entre_PIC_PC
0x0099      [10]    ?lstr4_comunicador_entre_PIC_PC
0x00A3      [30]    ?lstr5_comunicador_entre_PIC_PC
0x00C1       [2]    _posBufferModulo
0x00C3       [2]    _posBufferPc
0x00C5      [50]    bufferPc
0x00F7      [50]    bufferModulo
0x0129       [1]    _retorno
0x012A       [2]    main_i_L0
0x012C      [10]    loop_saidaclock_L1
0x0136       [1]    loop_clock_L1
0x0137       [1]    FARG_escrever_paraQuem
0x0137       [1]    FARG_ShortToStr_input
0x0137       [2]    FARG_read_mensagem
0x0138       [2]    FARG_ShortToStr_output
0x0138       [2]    FARG_escrever_mensagem
0x0139       [2]    FARG_read_buf
0x013A       [2]    ShortToStr_i_L0
0x013B       [2]    read_j_L0
0x013C       [2]    ShortToStr_negative_L0
0x013E       [2]    ShortToStr_inbyte_L0
0x0140       [1]    FARG_ByteToStr_input
0x0141       [2]    FARG_ByteToStr_output
0x0143       [1]    ByteToStr_DigitPos_L0
0x0144       [2]    FLOC__ByteToStr
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F3B       [1]    ANSELD
0x0F4A       [1]    T6CON
0x0F4C       [1]    TMR6
0x0F51       [1]    T4CON
0x0F53       [1]    TMR4
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F74       [1]    RCREG2
0x0F74       [1]    RC2REG
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F7E       [1]    PIR5
0x0F7F       [1]    IPR5
0x0F81       [1]    PORTB
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0F9D       [1]    PIE1
0x0F9D       [0]    TX1IE_bit
0x0F9E       [0]    RC1IF_bit
0x0F9E       [1]    PIR1
0x0F9F       [1]    IPR1
0x0FA3       [1]    PIE3
0x0FA3       [0]    TX2IE_bit
0x0FA4       [0]    RC2IF_bit
0x0FA4       [1]    PIR3
0x0FA5       [1]    IPR3
0x0FAB       [1]    RCSTA1
0x0FAC       [1]    TXSTA1
0x0FAD       [1]    TXREG1
0x0FAE       [1]    RC1REG
0x0FAE       [1]    RCREG1
0x0FAF       [1]    SPBRG1
0x0FB0       [1]    SPBRGH1
0x0FB8       [1]    BAUDCON1
0x0FD0       [1]    RCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x050E      [49]    ?ICS?lstr2_comunicador_entre_PIC_PC
0x053F      [11]    ?ICS?lstr1_comunicador_entre_PIC_PC
0x054A      [16]    ?ICS?lstr3_comunicador_entre_PIC_PC
0x055A      [23]    ?ICS?lstr6_comunicador_entre_PIC_PC
0x0571      [29]    ?ICS?lstr7_comunicador_entre_PIC_PC
0x058E      [10]    ?ICS?lstr4_comunicador_entre_PIC_PC
0x0598      [30]    ?ICS?lstr5_comunicador_entre_PIC_PC
0x05B6       [2]    ?ICS_posBufferModulo
0x05B8       [2]    ?ICS_posBufferPc
