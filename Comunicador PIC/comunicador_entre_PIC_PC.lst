;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 26/02/2018 14:58:39
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFFC  	GOTO        504
_interrupt:
;comunicador_entre_PIC_PC.c,141 :: 		void interrupt() //a interrupção de alta prioridade apenas armazenará os dados recebidos (no momento apenas do computador)
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;comunicador_entre_PIC_PC.c,143 :: 		if(RC1IF_bit)
0x0010	0xF017CFE1  	MOVFF       FSR1L, 23
0x0014	0xF018CFE2  	MOVFF       FSR1H, 24
0x0018	0xAA9E      	BTFSS       RC1IF_bit, BitPos(RC1IF_bit+0) 
0x001A	0xD019      	BRA         L_interrupt21
;comunicador_entre_PIC_PC.c,145 :: 		buffer[posBuffer] = RC1REG;
0x001C	0x0E32      	MOVLW       buffer
0x001E	0x2430      	ADDWF       _posBuffer, 0 
0x0020	0x6EE1      	MOVWF       FSR1L 
0x0022	0x0E00      	MOVLW       hi_addr(buffer)
0x0024	0x2031      	ADDWFC      _posBuffer+1, 0 
0x0026	0x6EE2      	MOVWF       FSR1H 
0x0028	0xFFE6CFAE  	MOVFF       RC1REG, POSTINC1
;comunicador_entre_PIC_PC.c,146 :: 		posBuffer++;
0x002C	0x0E01      	MOVLW       1
0x002E	0x2430      	ADDWF       _posBuffer, 0 
0x0030	0x6E00      	MOVWF       R0 
0x0032	0x0E00      	MOVLW       0
0x0034	0x2031      	ADDWFC      _posBuffer+1, 0 
0x0036	0x6E01      	MOVWF       R1 
0x0038	0xF030C000  	MOVFF       R0, _posBuffer
0x003C	0xF031C001  	MOVFF       R1, _posBuffer+1
;comunicador_entre_PIC_PC.c,147 :: 		buffer[posBuffer] = 0x00;
0x0040	0x0E32      	MOVLW       buffer
0x0042	0x2430      	ADDWF       _posBuffer, 0 
0x0044	0x6EE1      	MOVWF       FSR1L 
0x0046	0x0E00      	MOVLW       hi_addr(buffer)
0x0048	0x2031      	ADDWFC      _posBuffer+1, 0 
0x004A	0x6EE2      	MOVWF       FSR1H 
0x004C	0x6AE6      	CLRF        POSTINC1 
;comunicador_entre_PIC_PC.c,148 :: 		}
L_interrupt21:
;comunicador_entre_PIC_PC.c,150 :: 		if(RC2IF_bit)
0x004E	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x0050	0xD01B      	BRA         L_interrupt22
;comunicador_entre_PIC_PC.c,152 :: 		*(volatile int *)&GameBuffer[posGameBuffer] = RC2REG; //método para não termos otimização nesta área em específica, sem precisar do volatile
0x0052	0x0E5E      	MOVLW       GameBuffer
0x0054	0x2428      	ADDWF       _posGameBuffer, 0 
0x0056	0x6EE1      	MOVWF       FSR1L 
0x0058	0x0E00      	MOVLW       hi_addr(GameBuffer)
0x005A	0x2029      	ADDWFC      _posGameBuffer+1, 0 
0x005C	0x6EE2      	MOVWF       FSR1H 
0x005E	0xFFE6CF74  	MOVFF       RC2REG, POSTINC1
0x0062	0x0E00      	MOVLW       0
0x0064	0x6EE6      	MOVWF       POSTINC1 
;comunicador_entre_PIC_PC.c,153 :: 		posGameBuffer++;
0x0066	0x0E01      	MOVLW       1
0x0068	0x2428      	ADDWF       _posGameBuffer, 0 
0x006A	0x6E00      	MOVWF       R0 
0x006C	0x0E00      	MOVLW       0
0x006E	0x2029      	ADDWFC      _posGameBuffer+1, 0 
0x0070	0x6E01      	MOVWF       R1 
0x0072	0xF028C000  	MOVFF       R0, _posGameBuffer
0x0076	0xF029C001  	MOVFF       R1, _posGameBuffer+1
;comunicador_entre_PIC_PC.c,154 :: 		GameBuffer[posGameBuffer] = 0x00;
0x007A	0x0E5E      	MOVLW       GameBuffer
0x007C	0x2428      	ADDWF       _posGameBuffer, 0 
0x007E	0x6EE1      	MOVWF       FSR1L 
0x0080	0x0E00      	MOVLW       hi_addr(GameBuffer)
0x0082	0x2029      	ADDWFC      _posGameBuffer+1, 0 
0x0084	0x6EE2      	MOVWF       FSR1H 
0x0086	0x6AE6      	CLRF        POSTINC1 
;comunicador_entre_PIC_PC.c,155 :: 		}
L_interrupt22:
;comunicador_entre_PIC_PC.c,156 :: 		}
L_end_interrupt:
L__interrupt43:
0x0088	0xF000C016  	MOVFF       22, R0
0x008C	0xF001C015  	MOVFF       21, R1
0x0090	0xFFE1C017  	MOVFF       23, FSR1L
0x0094	0xFFE2C018  	MOVFF       24, FSR1H
0x0098	0x0011      	RETFIE      1
; end of _interrupt
_read:
;comunicador_entre_PIC_PC.c,98 :: 		char read(char *mensagem) //retorna 1 se a mensagem for encontrada e zero caso não (no buffer, no caso)
;comunicador_entre_PIC_PC.c,101 :: 		int j = 0;
0x009A	0x0100      	MOVLB       0
0x009C	0x6B8B      	CLRF        read_j_L0, 1
0x009E	0x6B8C      	CLRF        read_j_L0+1, 1
;comunicador_entre_PIC_PC.c,102 :: 		for(i = 0 ; buffer[i] != 0x00; i+= 1 + j)
0x00A0	0x6A02      	CLRF        R2 
0x00A2	0x6A03      	CLRF        R3 
L_read8:
0x00A4	0x0E32      	MOVLW       buffer
0x00A6	0x2402      	ADDWF       R2, 0 
0x00A8	0x6EE9      	MOVWF       FSR0L 
0x00AA	0x0E00      	MOVLW       hi_addr(buffer)
0x00AC	0x2003      	ADDWFC      R3, 0 
0x00AE	0x6EEA      	MOVWF       FSR0H 
0x00B0	0x50EE      	MOVF        POSTINC0, 0 
0x00B2	0x0A00      	XORLW       0
0x00B4	0xE05F      	BZ          L_read9
;comunicador_entre_PIC_PC.c,104 :: 		for(j = 0; mensagem[j] == buffer[i+j]; j++)
0x00B6	0x6B8B      	CLRF        read_j_L0, 1
0x00B8	0x6B8C      	CLRF        read_j_L0+1, 1
L_read11:
0x00BA	0x518B      	MOVF        read_j_L0, 0, 1
0x00BC	0x2589      	ADDWF       FARG_read_mensagem, 0, 1
0x00BE	0x6EE9      	MOVWF       FSR0L 
0x00C0	0x518C      	MOVF        read_j_L0+1, 0, 1
0x00C2	0x218A      	ADDWFC      FARG_read_mensagem+1, 0, 1
0x00C4	0x6EEA      	MOVWF       FSR0H 
0x00C6	0x518B      	MOVF        read_j_L0, 0, 1
0x00C8	0x2402      	ADDWF       R2, 0 
0x00CA	0x6E00      	MOVWF       R0 
0x00CC	0x518C      	MOVF        read_j_L0+1, 0, 1
0x00CE	0x2003      	ADDWFC      R3, 0 
0x00D0	0x6E01      	MOVWF       R1 
0x00D2	0x0E32      	MOVLW       buffer
0x00D4	0x2400      	ADDWF       R0, 0 
0x00D6	0x6ED9      	MOVWF       FSR2L 
0x00D8	0x0E00      	MOVLW       hi_addr(buffer)
0x00DA	0x2001      	ADDWFC      R1, 0 
0x00DC	0x6EDA      	MOVWF       FSR2H 
0x00DE	0x50EE      	MOVF        POSTINC0, 0 
0x00E0	0x18DE      	XORWF       POSTINC2, 0 
0x00E2	0xE13D      	BNZ         L_read12
;comunicador_entre_PIC_PC.c,106 :: 		if(mensagem[j+1] == 0x00)
0x00E4	0x0E01      	MOVLW       1
0x00E6	0x258B      	ADDWF       read_j_L0, 0, 1
0x00E8	0x6E00      	MOVWF       R0 
0x00EA	0x0E00      	MOVLW       0
0x00EC	0x218C      	ADDWFC      read_j_L0+1, 0, 1
0x00EE	0x6E01      	MOVWF       R1 
0x00F0	0x5000      	MOVF        R0, 0 
0x00F2	0x2589      	ADDWF       FARG_read_mensagem, 0, 1
0x00F4	0x6EE9      	MOVWF       FSR0L 
0x00F6	0x5001      	MOVF        R1, 0 
0x00F8	0x218A      	ADDWFC      FARG_read_mensagem+1, 0, 1
0x00FA	0x6EEA      	MOVWF       FSR0H 
0x00FC	0x50EE      	MOVF        POSTINC0, 0 
0x00FE	0x0A00      	XORLW       0
0x0100	0xE12B      	BNZ         L_read14
;comunicador_entre_PIC_PC.c,108 :: 		margeIn = i;
0x0102	0xF05CC002  	MOVFF       R2, _margeIn
0x0106	0xF05DC003  	MOVFF       R3, _margeIn+1
;comunicador_entre_PIC_PC.c,109 :: 		margeOut = i+j;
0x010A	0x518B      	MOVF        read_j_L0, 0, 1
0x010C	0x2402      	ADDWF       R2, 0 
0x010E	0x6E00      	MOVWF       R0 
0x0110	0x518C      	MOVF        read_j_L0+1, 0, 1
0x0112	0x2003      	ADDWFC      R3, 0 
0x0114	0x6E01      	MOVWF       R1 
0x0116	0xF05AC000  	MOVFF       R0, _margeOut
0x011A	0xF05BC001  	MOVFF       R1, _margeOut+1
;comunicador_entre_PIC_PC.c,110 :: 		buffer[i+j] = 0xFF;
0x011E	0x0E32      	MOVLW       buffer
0x0120	0x2400      	ADDWF       R0, 0 
0x0122	0x6EE1      	MOVWF       FSR1L 
0x0124	0x0E00      	MOVLW       hi_addr(buffer)
0x0126	0x2001      	ADDWFC      R1, 0 
0x0128	0x6EE2      	MOVWF       FSR1H 
0x012A	0x0EFF      	MOVLW       255
0x012C	0x6EE6      	MOVWF       POSTINC1 
;comunicador_entre_PIC_PC.c,111 :: 		buffer[i+j-1] = 0xFF;
0x012E	0x518B      	MOVF        read_j_L0, 0, 1
0x0130	0x2402      	ADDWF       R2, 0 
0x0132	0x6E00      	MOVWF       R0 
0x0134	0x518C      	MOVF        read_j_L0+1, 0, 1
0x0136	0x2003      	ADDWFC      R3, 0 
0x0138	0x6E01      	MOVWF       R1 
0x013A	0x0E01      	MOVLW       1
0x013C	0x5E00      	SUBWF       R0, 1 
0x013E	0x0E00      	MOVLW       0
0x0140	0x5A01      	SUBWFB      R1, 1 
0x0142	0x0E32      	MOVLW       buffer
0x0144	0x2400      	ADDWF       R0, 0 
0x0146	0x6EE1      	MOVWF       FSR1L 
0x0148	0x0E00      	MOVLW       hi_addr(buffer)
0x014A	0x2001      	ADDWFC      R1, 0 
0x014C	0x6EE2      	MOVWF       FSR1H 
0x014E	0x0EFF      	MOVLW       255
0x0150	0x6EE6      	MOVWF       POSTINC1 
;comunicador_entre_PIC_PC.c,112 :: 		return 1;
0x0152	0x0E01      	MOVLW       1
0x0154	0x6E00      	MOVWF       R0 
0x0156	0xD00F      	BRA         L_end_read
;comunicador_entre_PIC_PC.c,113 :: 		}
L_read14:
;comunicador_entre_PIC_PC.c,104 :: 		for(j = 0; mensagem[j] == buffer[i+j]; j++)
0x0158	0x4B8B      	INFSNZ      read_j_L0, 1, 1
0x015A	0x2B8C      	INCF        read_j_L0+1, 1, 1
;comunicador_entre_PIC_PC.c,114 :: 		}
0x015C	0xD7AE      	BRA         L_read11
L_read12:
;comunicador_entre_PIC_PC.c,102 :: 		for(i = 0 ; buffer[i] != 0x00; i+= 1 + j)
0x015E	0x0E01      	MOVLW       1
0x0160	0x258B      	ADDWF       read_j_L0, 0, 1
0x0162	0x6E00      	MOVWF       R0 
0x0164	0x0E00      	MOVLW       0
0x0166	0x218C      	ADDWFC      read_j_L0+1, 0, 1
0x0168	0x6E01      	MOVWF       R1 
0x016A	0x5000      	MOVF        R0, 0 
0x016C	0x2602      	ADDWF       R2, 1 
0x016E	0x5001      	MOVF        R1, 0 
0x0170	0x2203      	ADDWFC      R3, 1 
;comunicador_entre_PIC_PC.c,115 :: 		}
0x0172	0xD798      	BRA         L_read8
L_read9:
;comunicador_entre_PIC_PC.c,116 :: 		return 0;
0x0174	0x6A00      	CLRF        R0 
;comunicador_entre_PIC_PC.c,117 :: 		}
L_end_read:
0x0176	0x0012      	RETURN      0
; end of _read
_loop:
;comunicador_entre_PIC_PC.c,120 :: 		unsigned short loop()
;comunicador_entre_PIC_PC.c,122 :: 		read("left") PORTB = 0xFF;
0x0178	0x0E23      	MOVLW       ?lstr1_comunicador_entre_PIC_PC
0x017A	0x0100      	MOVLB       0
0x017C	0x6F89      	MOVWF       FARG_read_mensagem, 1
0x017E	0x0E00      	MOVLW       hi_addr(?lstr1_comunicador_entre_PIC_PC)
0x0180	0x6F8A      	MOVWF       FARG_read_mensagem+1, 1
0x0182	0xDF8B      	RCALL       _read
0x0184	0x5200      	MOVF        R0, 1 
0x0186	0xE002      	BZ          L_loop15
0x0188	0x0EFF      	MOVLW       255
0x018A	0x6E81      	MOVWF       PORTB 
L_loop15:
;comunicador_entre_PIC_PC.c,124 :: 		read("right") PORTB = 0x00;
0x018C	0x0E2A      	MOVLW       ?lstr2_comunicador_entre_PIC_PC
0x018E	0x6F89      	MOVWF       FARG_read_mensagem, 1
0x0190	0x0E00      	MOVLW       hi_addr(?lstr2_comunicador_entre_PIC_PC)
0x0192	0x6F8A      	MOVWF       FARG_read_mensagem+1, 1
0x0194	0xDF82      	RCALL       _read
0x0196	0x5200      	MOVF        R0, 1 
0x0198	0xA4D8      	BTFSS       STATUS, 2 
0x019A	0x6A81      	CLRF        PORTB 
L_loop16:
;comunicador_entre_PIC_PC.c,126 :: 		read("esta vivo")
0x019C	0x0E19      	MOVLW       ?lstr3_comunicador_entre_PIC_PC
0x019E	0x6F89      	MOVWF       FARG_read_mensagem, 1
0x01A0	0x0E00      	MOVLW       hi_addr(?lstr3_comunicador_entre_PIC_PC)
0x01A2	0x6F8A      	MOVWF       FARG_read_mensagem+1, 1
0x01A4	0xDF7A      	RCALL       _read
0x01A6	0x5200      	MOVF        R0, 1 
0x01A8	0xE01E      	BZ          L_loop17
;comunicador_entre_PIC_PC.c,128 :: 		TXREG1 = 'P';
0x01AA	0x0E50      	MOVLW       80
0x01AC	0x6EAD      	MOVWF       TXREG1 
;comunicador_entre_PIC_PC.c,129 :: 		delay_ms(10);
0x01AE	0x0E65      	MOVLW       101
0x01B0	0x6E0C      	MOVWF       R12, 0
0x01B2	0x0EA5      	MOVLW       165
0x01B4	0x6E0D      	MOVWF       R13, 0
L_loop18:
0x01B6	0x2E0D      	DECFSZ      R13, 1, 0
0x01B8	0xD7FE      	BRA         L_loop18
0x01BA	0x2E0C      	DECFSZ      R12, 1, 0
0x01BC	0xD7FC      	BRA         L_loop18
;comunicador_entre_PIC_PC.c,130 :: 		TXREG1 = 'a';
0x01BE	0x0E61      	MOVLW       97
0x01C0	0x6EAD      	MOVWF       TXREG1 
;comunicador_entre_PIC_PC.c,131 :: 		delay_ms(10);
0x01C2	0x0E65      	MOVLW       101
0x01C4	0x6E0C      	MOVWF       R12, 0
0x01C6	0x0EA5      	MOVLW       165
0x01C8	0x6E0D      	MOVWF       R13, 0
L_loop19:
0x01CA	0x2E0D      	DECFSZ      R13, 1, 0
0x01CC	0xD7FE      	BRA         L_loop19
0x01CE	0x2E0C      	DECFSZ      R12, 1, 0
0x01D0	0xD7FC      	BRA         L_loop19
;comunicador_entre_PIC_PC.c,132 :: 		TXREG1 = 'i';
0x01D2	0x0E69      	MOVLW       105
0x01D4	0x6EAD      	MOVWF       TXREG1 
;comunicador_entre_PIC_PC.c,133 :: 		delay_ms(10);
0x01D6	0x0E65      	MOVLW       101
0x01D8	0x6E0C      	MOVWF       R12, 0
0x01DA	0x0EA5      	MOVLW       165
0x01DC	0x6E0D      	MOVWF       R13, 0
L_loop20:
0x01DE	0x2E0D      	DECFSZ      R13, 1, 0
0x01E0	0xD7FE      	BRA         L_loop20
0x01E2	0x2E0C      	DECFSZ      R12, 1, 0
0x01E4	0xD7FC      	BRA         L_loop20
;comunicador_entre_PIC_PC.c,137 :: 		}
L_loop17:
;comunicador_entre_PIC_PC.c,139 :: 		}
L_end_loop:
0x01E6	0x0012      	RETURN      0
; end of _loop
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x01E8	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x01EA	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x01EE	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x01F0	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x01F2	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x01F4	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x01F6	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x01F8	0xF001EC76  	CALL        748, 0
;comunicador_entre_PIC_PC.c,158 :: 		void main()
;comunicador_entre_PIC_PC.c,163 :: 		TXSTA1.BRGH = 1; //Habilita o Intenso Baundrate (usa dois registradores para realiar a contagem de bits por segundo)
0x01FC	0x84AC      	BSF         TXSTA1, 2 
;comunicador_entre_PIC_PC.c,164 :: 		BAUDCON1.BRG16 = 1; //Contador utiliza os dezesseis bits (o registrador SPBRG1 é utilizado caso esteja em um,e descarta o SPBRGH1 quando esta em zero)
0x01FE	0x86B8      	BSF         BAUDCON1, 3 
;comunicador_entre_PIC_PC.c,165 :: 		SPBRGH1 = 0x00;
0x0200	0x6AB0      	CLRF        SPBRGH1 
;comunicador_entre_PIC_PC.c,166 :: 		SPBRG1 = 0x41; //baundrate configurado para 115200 (utilizando uma frequencia de aproxidamente 35MHz);
0x0202	0x0E41      	MOVLW       65
0x0204	0x6EAF      	MOVWF       SPBRG1 
;comunicador_entre_PIC_PC.c,168 :: 		TXSTA2.BRGH = 1; //Desabilita o Intenso Baundrate
0x0206	0x8472      	BSF         TXSTA2, 2 
;comunicador_entre_PIC_PC.c,169 :: 		BAUDCON2.BRG16 = 1; //Contador utiliza os dezesseis bits (o registrador SPBRG1 é utilizado,e descarta o SPBRGH1 quando esta em zero)
0x0208	0x8670      	BSF         BAUDCON2, 3 
;comunicador_entre_PIC_PC.c,170 :: 		SPBRGH2 = 0x00;
0x020A	0x6A76      	CLRF        SPBRGH2 
;comunicador_entre_PIC_PC.c,171 :: 		SPBRG2 = 0x45; //baundrate configurado para (utilizando uma frequencia de aproxidamente 35MHz);
0x020C	0x0E45      	MOVLW       69
0x020E	0x6E75      	MOVWF       SPBRG2 
;comunicador_entre_PIC_PC.c,174 :: 		TRISB = 0x00;
0x0210	0x6A93      	CLRF        TRISB 
;comunicador_entre_PIC_PC.c,175 :: 		TRISC = 0xFF; //os dois registradores acima possuem pinos referentes ao EUSART1 e EUSART2, respectivamente e devem ser setados como saída
0x0212	0x0EFF      	MOVLW       255
0x0214	0x6E94      	MOVWF       TRISC 
;comunicador_entre_PIC_PC.c,176 :: 		TRISD = 0xFF;
0x0216	0x0EFF      	MOVLW       255
0x0218	0x6E95      	MOVWF       TRISD 
;comunicador_entre_PIC_PC.c,177 :: 		PORTB = 0x00;
0x021A	0x6A81      	CLRF        PORTB 
;comunicador_entre_PIC_PC.c,180 :: 		TXSTA1.SYNC = 0;  //modo assincrono
0x021C	0x98AC      	BCF         TXSTA1, 4 
;comunicador_entre_PIC_PC.c,181 :: 		RCSTA1.SPEN = 1;  //liga a eusart
0x021E	0x8EAB      	BSF         RCSTA1, 7 
;comunicador_entre_PIC_PC.c,182 :: 		TXSTA1.TXEN = 1;  //liga o circuito transmissor
0x0220	0x8AAC      	BSF         TXSTA1, 5 
;comunicador_entre_PIC_PC.c,183 :: 		TX1IE_bit = 0;    //flag do receptor setado para zero pois não será utilizado a interrupção por envio de dados
0x0222	0x989D      	BCF         TX1IE_bit, BitPos(TX1IE_bit+0) 
;comunicador_entre_PIC_PC.c,184 :: 		ANSELB = 0x00;
0x0224	0x010F      	MOVLB       15
0x0226	0x6B39      	CLRF        ANSELB, 1
;comunicador_entre_PIC_PC.c,185 :: 		ANSELC = 0x00;
0x0228	0x6B3A      	CLRF        ANSELC, 1
;comunicador_entre_PIC_PC.c,187 :: 		TXSTA2.SYNC = 0;  //modo assincrono
0x022A	0x9872      	BCF         TXSTA2, 4 
;comunicador_entre_PIC_PC.c,188 :: 		RCSTA2.SPEN = 1;  //liga a eusart
0x022C	0x8E71      	BSF         RCSTA2, 7 
;comunicador_entre_PIC_PC.c,189 :: 		TXSTA2.TXEN = 1;  //liga o circuito transmissor
0x022E	0x8A72      	BSF         TXSTA2, 5 
;comunicador_entre_PIC_PC.c,190 :: 		TX2IE_bit = 0;    //flag do receptor setado para zero pois não será utilizado a interrupção por envio de dados
0x0230	0x98A3      	BCF         TX2IE_bit, BitPos(TX2IE_bit+0) 
;comunicador_entre_PIC_PC.c,191 :: 		ANSELD = 0x00;    //Os registrador Analogico-Digital devem estar desabilitado para que a comunicação funcione (ANSELB para o EUSART1 e ANSELC para EUSART2
0x0232	0x6B3B      	CLRF        ANSELD, 1
;comunicador_entre_PIC_PC.c,195 :: 		RCSTA1.CREN = 1; //similar ao spen. Habilita o circuito
0x0234	0x88AB      	BSF         RCSTA1, 4 
;comunicador_entre_PIC_PC.c,198 :: 		while(PIR1.RC1IF) {RCREG1;} //para limpar o buffer. Uma precaução antes de iniciar o programa. Enquanto houver dados no buffer, lê-los.
L_main23:
0x0236	0xAA9E      	BTFSS       PIR1, 5 
0x0238	0xD001      	BRA         L_main24
0x023A	0xD7FD      	BRA         L_main23
L_main24:
;comunicador_entre_PIC_PC.c,200 :: 		RCSTA2.CREN = 1; //similar ao spen. Habilita o circuito
0x023C	0x8871      	BSF         RCSTA2, 4 
;comunicador_entre_PIC_PC.c,203 :: 		while(PIR3.RC2IF) {RCREG2;} //para limpar o buffer. Uma precaução antes de iniciar o programa. Enquanto houver dados no buffer, lê-los.
L_main25:
0x023E	0xAAA4      	BTFSS       PIR3, 5 
0x0240	0xD001      	BRA         L_main26
0x0242	0xD7FD      	BRA         L_main25
L_main26:
;comunicador_entre_PIC_PC.c,207 :: 		INTCON.GIE = 0x01;  //habilita a interrupção global
0x0244	0x8EF2      	BSF         INTCON, 7 
;comunicador_entre_PIC_PC.c,208 :: 		INTCON.PEIE = 0x01; //habilita a interrupção por periférico
0x0246	0x8CF2      	BSF         INTCON, 6 
;comunicador_entre_PIC_PC.c,209 :: 		RCON.IPEN = 0x01; //interrupção por prioridades habilitado (significa que poderá haver interrupção de alto nível e baixo nível no programa)
0x0248	0x8ED0      	BSF         RCON, 7 
;comunicador_entre_PIC_PC.c,211 :: 		IPR1.RC1IP = 0x01;         //recepção de dados (RX) possui interrupção de baixa prioridade
0x024A	0x8A9F      	BSF         IPR1, 5 
;comunicador_entre_PIC_PC.c,212 :: 		IPR1.TX1IP = 0x01;         //tranmissao possui interrupção de baixa prioridade
0x024C	0x889F      	BSF         IPR1, 4 
;comunicador_entre_PIC_PC.c,213 :: 		PIR1.TX1IF = 0x00;            //flag setada para um toda vez que a transmissão eusart estiver habilitada e não houver dados sendo segurados no TXREG. é apenas zero quando o registrador tsr esta ocupado com um byte e um byte está a espara para a tranmissão em txreg
0x024E	0x989E      	BCF         PIR1, 4 
;comunicador_entre_PIC_PC.c,214 :: 		PIE1.TX1IE = 0x00;            //desabilita interrupção por tx
0x0250	0x989D      	BCF         PIE1, 4 
;comunicador_entre_PIC_PC.c,215 :: 		PIR1.RC1IF = 0x00;            //flag setada para um enquanto houver dados para receber e tratar
0x0252	0x9A9E      	BCF         PIR1, 5 
;comunicador_entre_PIC_PC.c,216 :: 		PIE1.RC1IE = 0x01;            // habilita a interrpção por rx
0x0254	0x8A9D      	BSF         PIE1, 5 
;comunicador_entre_PIC_PC.c,218 :: 		IPR3.RC2IP = 0x01;         //recepção de dados (RX) possui interrupção de alta prioridade
0x0256	0x8AA5      	BSF         IPR3, 5 
;comunicador_entre_PIC_PC.c,219 :: 		IPR3.TX2IP = 0x01;         //tranmissao possui interrupção de alta prioridade
0x0258	0x88A5      	BSF         IPR3, 4 
;comunicador_entre_PIC_PC.c,220 :: 		PIR3.TX2IF = 0x00;            //flag setada para um toda vez que a transmissão eusart estiver habilitada e não houver dados sendo segurados no TXREG. é apenas zero quando o registrador tsr esta ocupado com um byte e um byte está a espara para a tranmissão em txreg
0x025A	0x98A4      	BCF         PIR3, 4 
;comunicador_entre_PIC_PC.c,221 :: 		PIE3.TX2IE = 0x00;            //desabilita interrupção por tx
0x025C	0x98A3      	BCF         PIE3, 4 
;comunicador_entre_PIC_PC.c,222 :: 		PIR3.RC2IF = 0x00;            //flag setada para um enquanto houver dados para receber e tratar
0x025E	0x9AA4      	BCF         PIR3, 5 
;comunicador_entre_PIC_PC.c,223 :: 		PIE3.RC2IE = 0x01;            // habilita a interrpção por rx
0x0260	0x8AA3      	BSF         PIE3, 5 
;comunicador_entre_PIC_PC.c,226 :: 		PIR5.TMR6IF = 0;
0x0262	0x947E      	BCF         PIR5, 2 
;comunicador_entre_PIC_PC.c,227 :: 		PIR5.TMR4IF = 0;
0x0264	0x907E      	BCF         PIR5, 0 
;comunicador_entre_PIC_PC.c,228 :: 		PIE5.TMR6IE = 1;
0x0266	0x847D      	BSF         PIE5, 2 
;comunicador_entre_PIC_PC.c,229 :: 		PIR5.TMR4IE = 1;
0x0268	0x807E      	BSF         PIR5, 0 
;comunicador_entre_PIC_PC.c,230 :: 		IPR5.TMR6IP = 0;
0x026A	0x947F      	BCF         IPR5, 2 
;comunicador_entre_PIC_PC.c,231 :: 		IPR5.TMR4IP = 0;
0x026C	0x907F      	BCF         IPR5, 0 
;comunicador_entre_PIC_PC.c,232 :: 		TMR6 = 0;
0x026E	0x6B4C      	CLRF        TMR6, 1
;comunicador_entre_PIC_PC.c,233 :: 		TMR4 = 0;
0x0270	0x6B53      	CLRF        TMR4, 1
;comunicador_entre_PIC_PC.c,234 :: 		T6CON = 0b00111001; //os valores do timer ainda devem ser ajustados corretamente
0x0272	0x0E39      	MOVLW       57
0x0274	0x6F4A      	MOVWF       T6CON, 1
;comunicador_entre_PIC_PC.c,235 :: 		T4CON = 0b00111001; //define um tempo para 10 ms (pode estar errao por hora) considerando uma entrada de 136 vezes na interrupção  e uma frequencia d 31MHz
0x0276	0x0E39      	MOVLW       57
0x0278	0x6F51      	MOVWF       T4CON, 1
;comunicador_entre_PIC_PC.c,236 :: 		T6CON.TMR6ON = 0;
0x027A	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,237 :: 		T6CON.TMR4ON = 0;
0x027C	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,241 :: 		for(i = 0; i < tamanhoBuffer;i++) buffer[i] = 0xFF;
0x027E	0x0100      	MOVLB       0
0x0280	0x6B87      	CLRF        main_i_L0, 1
0x0282	0x6B88      	CLRF        main_i_L0+1, 1
L_main27:
0x0284	0x0E80      	MOVLW       128
0x0286	0x1988      	XORWF       main_i_L0+1, 0, 1
0x0288	0x6E00      	MOVWF       R0 
0x028A	0x0E80      	MOVLW       128
0x028C	0x5C00      	SUBWF       R0, 0 
0x028E	0xE102      	BNZ         L__main45
0x0290	0x0E28      	MOVLW       40
0x0292	0x5D87      	SUBWF       main_i_L0, 0, 1
L__main45:
0x0294	0xE20B      	BC          L_main28
0x0296	0x0E32      	MOVLW       buffer
0x0298	0x2587      	ADDWF       main_i_L0, 0, 1
0x029A	0x6EE1      	MOVWF       FSR1L 
0x029C	0x0E00      	MOVLW       hi_addr(buffer)
0x029E	0x2188      	ADDWFC      main_i_L0+1, 0, 1
0x02A0	0x6EE2      	MOVWF       FSR1H 
0x02A2	0x0EFF      	MOVLW       255
0x02A4	0x6EE6      	MOVWF       POSTINC1 
0x02A6	0x4B87      	INFSNZ      main_i_L0, 1, 1
0x02A8	0x2B88      	INCF        main_i_L0+1, 1, 1
0x02AA	0xD7EC      	BRA         L_main27
L_main28:
;comunicador_entre_PIC_PC.c,245 :: 		posBuffer = 0;
0x02AC	0x6A30      	CLRF        _posBuffer 
0x02AE	0x6A31      	CLRF        _posBuffer+1 
;comunicador_entre_PIC_PC.c,246 :: 		PORTB = 0x00;
0x02B0	0x6A81      	CLRF        PORTB 
;comunicador_entre_PIC_PC.c,247 :: 		while(1)
L_main30:
;comunicador_entre_PIC_PC.c,249 :: 		retorno = loop();
0x02B2	0xDF62      	RCALL       _loop
0x02B4	0xF086C000  	MOVFF       R0, _retorno
;comunicador_entre_PIC_PC.c,250 :: 		if(posBuffer > 35)   //chance de corrupção de dados
0x02B8	0x0E80      	MOVLW       128
0x02BA	0x6E00      	MOVWF       R0 
0x02BC	0x0E80      	MOVLW       128
0x02BE	0x1831      	XORWF       _posBuffer+1, 0 
0x02C0	0x5C00      	SUBWF       R0, 0 
0x02C2	0xE102      	BNZ         L__main46
0x02C4	0x5030      	MOVF        _posBuffer, 0 
0x02C6	0x0823      	SUBLW       35
L__main46:
0x02C8	0xE202      	BC          L_main32
;comunicador_entre_PIC_PC.c,252 :: 		posBuffer = 0;
0x02CA	0x6A30      	CLRF        _posBuffer 
0x02CC	0x6A31      	CLRF        _posBuffer+1 
;comunicador_entre_PIC_PC.c,254 :: 		}
L_main32:
;comunicador_entre_PIC_PC.c,255 :: 		}
0x02CE	0xD7F1      	BRA         L_main30
;comunicador_entre_PIC_PC.c,256 :: 		}
L_end_main:
0x02D0	0xD7FF      	BRA         $+0
; end of _main
0x02EC	0xF019EE10  	LFSR        1, 25
0x02F0	0x0E19      	MOVLW       25
0x02F2	0x6E00      	MOVWF       R0 
0x02F4	0x0E01      	MOVLW       1
0x02F6	0x6E01      	MOVWF       R1 
0x02F8	0x0ED2      	MOVLW       210
0x02FA	0x6EF6      	MOVWF       4086 
0x02FC	0x0E02      	MOVLW       2
0x02FE	0x6EF7      	MOVWF       TBLPTRH 
0x0300	0x0E00      	MOVLW       0
0x0302	0x6EF8      	MOVWF       TBLPTRU 
0x0304	0xF000ECF4  	CALL        488, 0
0x0308	0x0012      	RETURN      0
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr3_comunicador_entre_PIC_PC
0x02D2	0x7365 ;?ICS?lstr3_comunicador_entre_PIC_PC+0
0x02D4	0x6174 ;?ICS?lstr3_comunicador_entre_PIC_PC+2
0x02D6	0x7620 ;?ICS?lstr3_comunicador_entre_PIC_PC+4
0x02D8	0x7669 ;?ICS?lstr3_comunicador_entre_PIC_PC+6
0x02DA	0x006F ;?ICS?lstr3_comunicador_entre_PIC_PC+8
; end of ?ICS?lstr3_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr1_comunicador_entre_PIC_PC
0x02DC	0x656C ;?ICS?lstr1_comunicador_entre_PIC_PC+0
0x02DE	0x7466 ;?ICS?lstr1_comunicador_entre_PIC_PC+2
0x02E0	0x00 ;?ICS?lstr1_comunicador_entre_PIC_PC+4
; end of ?ICS?lstr1_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS_posGameBuffer
0x02E1	0x0000 ;?ICS_posGameBuffer+0
; end of ?ICS_posGameBuffer
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr2_comunicador_entre_PIC_PC
0x02E3	0x6972 ;?ICS?lstr2_comunicador_entre_PIC_PC+0
0x02E5	0x6867 ;?ICS?lstr2_comunicador_entre_PIC_PC+2
0x02E7	0x0074 ;?ICS?lstr2_comunicador_entre_PIC_PC+4
; end of ?ICS?lstr2_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS_posBuffer
0x02E9	0x0000 ;?ICS_posBuffer+0
; end of ?ICS_posBuffer
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [146]    _interrupt
0x009A     [222]    _read
0x0178     [112]    _loop
0x01E8      [16]    ___CC2DW
0x01F8     [218]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    R1
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0002       [1]    R2
0x0002       [2]    __Lib_FT812_alt_strlen_cp_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    __Lib_FT800_alt_memcpy_dd_L0
0x0002       [2]    __Lib_FT812_alt_memset_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    __Lib_FT800_alt_memset_pp_L0
0x0002       [2]    __Lib_FT812_alt_memcpy_dd_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    __Lib_FT810_alt_memcpy_dd_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0002       [2]    __Lib_FT800_alt_strlen_cp_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    __Lib_FT810_alt_strlen_cp_L0
0x0002       [2]    __Lib_FT810_alt_memset_pp_L0
0x0002       [2]    read_i_L0
0x0003       [4]    FT812_Canvas_SurrRect_minX_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    R3
0x0003       [4]    FT810_Canvas_SurrRect_minX_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [4]    FT800_Canvas_SurrRect_minX_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    MM_Init_i_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    __Lib_FT800_alt_memcpy_ss_L0
0x0004       [2]    __Lib_FT810_alt_memcpy_ss_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    R4
0x0004       [3]    __Lib_FT810_alt_strlen_const_cp_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [3]    __Lib_FT800_alt_strlen_const_cp_L0
0x0004       [3]    __Lib_FT812_alt_strlen_const_cp_L0
0x0004       [2]    __Lib_FT812_alt_memcpy_ss_L0
0x0004       [2]    memcpy_ss_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    R6
0x0007       [1]    R7
0x0007       [4]    FT810_Canvas_SurrRect_minY_L0
0x0007       [4]    FT812_Canvas_SurrRect_minY_L0
0x0007       [4]    FT800_Canvas_SurrRect_minY_L0
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000B       [4]    FT810_Canvas_SurrRect_maxX_L0
0x000B       [4]    FT800_Canvas_SurrRect_maxX_L0
0x000B       [4]    FT812_Canvas_SurrRect_maxX_L0
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [4]    FT800_Canvas_SurrRect_maxY_L0
0x000F       [4]    FT810_Canvas_SurrRect_maxY_L0
0x000F       [4]    FT812_Canvas_SurrRect_maxY_L0
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019      [10]    ?lstr3_comunicador_entre_PIC_PC
0x0023       [5]    ?lstr1_comunicador_entre_PIC_PC
0x0028       [2]    _posGameBuffer
0x002A       [6]    ?lstr2_comunicador_entre_PIC_PC
0x0030       [2]    _posBuffer
0x0032      [40]    buffer
0x005A       [2]    _margeOut
0x005C       [2]    _margeIn
0x005E      [40]    GameBuffer
0x0086       [1]    _retorno
0x0087       [2]    main_i_L0
0x0089       [2]    FARG_read_mensagem
0x008B       [2]    read_j_L0
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F3B       [1]    ANSELD
0x0F4A       [1]    T6CON
0x0F4C       [1]    TMR6
0x0F51       [1]    T4CON
0x0F53       [1]    TMR4
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F74       [1]    RC2REG
0x0F74       [1]    RCREG2
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F7D       [1]    PIE5
0x0F7E       [1]    PIR5
0x0F7F       [1]    IPR5
0x0F81       [1]    PORTB
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0F9D       [1]    PIE1
0x0F9D       [0]    TX1IE_bit
0x0F9E       [0]    RC1IF_bit
0x0F9E       [1]    PIR1
0x0F9F       [1]    IPR1
0x0FA3       [0]    TX2IE_bit
0x0FA3       [1]    PIE3
0x0FA4       [0]    RC2IF_bit
0x0FA4       [1]    PIR3
0x0FA5       [1]    IPR3
0x0FAB       [1]    RCSTA1
0x0FAC       [1]    TXSTA1
0x0FAD       [1]    TXREG1
0x0FAE       [1]    RC1REG
0x0FAE       [1]    RCREG1
0x0FAF       [1]    SPBRG1
0x0FB0       [1]    SPBRGH1
0x0FB8       [1]    BAUDCON1
0x0FD0       [1]    RCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x02D2      [10]    ?ICS?lstr3_comunicador_entre_PIC_PC
0x02DC       [5]    ?ICS?lstr1_comunicador_entre_PIC_PC
0x02E1       [2]    ?ICS_posGameBuffer
0x02E3       [6]    ?ICS?lstr2_comunicador_entre_PIC_PC
0x02E9       [2]    ?ICS_posBuffer
