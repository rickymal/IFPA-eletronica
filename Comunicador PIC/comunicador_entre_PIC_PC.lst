;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 23/02/2018 01:55:25
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF50  	GOTO        672
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF001EF36  	GOTO        620
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xF001EFA7  	GOTO        846
_UART1_Write:
;__Lib_UART_c67d67.c,63 :: 		
;__Lib_UART_c67d67.c,64 :: 		
L_UART1_Write3:
0x001C	0xB2AC      	BTFSC       TXSTA, 1 
0x001E	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67d67.c,65 :: 		
0x0020	0x0000      	NOP
0x0022	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67d67.c,66 :: 		
0x0024	0xFFADC16A  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67d67.c,67 :: 		
L_end_UART1_Write:
0x0028	0x0012      	RETURN      0
; end of _UART1_Write
_UART2_Write:
;__Lib_UART_c67d67.c,160 :: 		
;__Lib_UART_c67d67.c,161 :: 		
L_UART2_Write19:
0x002A	0xB272      	BTFSC       TXSTA2, 1 
0x002C	0xD001      	BRA         L_UART2_Write20
;__Lib_UART_c67d67.c,162 :: 		
0x002E	0xD7FD      	BRA         L_UART2_Write19
L_UART2_Write20:
;__Lib_UART_c67d67.c,163 :: 		
0x0030	0xFF73C16A  	MOVFF       FARG_UART2_Write_data_, TXREG2
;__Lib_UART_c67d67.c,164 :: 		
L_end_UART2_Write:
0x0034	0x0012      	RETURN      0
; end of _UART2_Write
_SPI1_Write:
;__Lib_SPI_c345d014.c,84 :: 		
;__Lib_SPI_c345d014.c,87 :: 		
0x0036	0xFFC9C16A  	MOVFF       FARG_SPI1_Write_data_, SSP1BUF
;__Lib_SPI_c345d014.c,88 :: 		
L_SPI1_Write8:
0x003A	0xB0C7      	BTFSC       SSP1STAT, 0 
0x003C	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345d014.c,89 :: 		
0x003E	0x0000      	NOP
0x0040	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345d014.c,90 :: 		
0x0042	0xF000CFC9  	MOVFF       SSP1BUF, R0
;__Lib_SPI_c345d014.c,92 :: 		
L_end_SPI1_Write:
0x0046	0x0012      	RETURN      0
; end of _SPI1_Write
_SPI2_Write:
;__Lib_SPI_c345d014.c,155 :: 		
;__Lib_SPI_c345d014.c,158 :: 		
0x0048	0xFF6FC16A  	MOVFF       FARG_SPI2_Write_data_, SSP2BUF
;__Lib_SPI_c345d014.c,159 :: 		
L_SPI2_Write16:
0x004C	0xB06D      	BTFSC       SSP2STAT, 0 
0x004E	0xD002      	BRA         L_SPI2_Write17
;__Lib_SPI_c345d014.c,160 :: 		
0x0050	0x0000      	NOP
0x0052	0xD7FC      	BRA         L_SPI2_Write16
L_SPI2_Write17:
;__Lib_SPI_c345d014.c,161 :: 		
0x0054	0xF000CF6F  	MOVFF       SSP2BUF, R0
;__Lib_SPI_c345d014.c,163 :: 		
L_end_SPI2_Write:
0x0058	0x0012      	RETURN      0
; end of _SPI2_Write
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x005A	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x005C	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x005E	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x0060	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x0062	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x0064	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x0066	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x0068	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x006A	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x006C	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x006E	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x0070	0x0012      	RETURN      0
; end of _____DoIFC
_servico:
;comunicador_entre_PIC_PC.c,37 :: 		void servico(char intent_field){ //determina o serviço que será utilizado
;comunicador_entre_PIC_PC.c,38 :: 		tent = intent_field;
0x0072	0xF14FC165  	MOVFF       FARG_servico_intent_field, _tent
0x0076	0x0E00      	MOVLW       0
0x0078	0x0101      	MOVLB       1
0x007A	0x6F50      	MOVWF       _tent+1, 1
;comunicador_entre_PIC_PC.c,39 :: 		assist = assistente;
0x007C	0x0E8C      	MOVLW       _assistente
0x007E	0x6F59      	MOVWF       _assist, 1
0x0080	0x0E01      	MOVLW       hi_addr(_assistente)
0x0082	0x6F5A      	MOVWF       _assist+1, 1
0x0084	0x0E00      	MOVLW       0
0x0086	0x6F5B      	MOVWF       _assist+2, 1
0x0088	0x0E00      	MOVLW       0
0x008A	0x6F5C      	MOVWF       _assist+3, 1
;comunicador_entre_PIC_PC.c,41 :: 		if(tent) overflow = 1;// provoco um estouro intencional para cuidar realizar assistencia no buffer
0x008C	0x514F      	MOVF        _tent, 0, 1
0x008E	0x1150      	IORWF       _tent+1, 0, 1
0x0090	0xA4D8      	BTFSS       STATUS, 2 
0x0092	0x847E      	BSF         TMR6IF_bit, BitPos(TMR6IF_bit+0) 
L_servico3:
;comunicador_entre_PIC_PC.c,43 :: 		}
L_end_servico:
0x0094	0x0012      	RETURN      0
; end of _servico
_I2C2_Repeated_Start:
;__Lib_I2C_c34d01.c,269 :: 		
;__Lib_I2C_c34d01.c,272 :: 		
0x0096	0xF166C021  	MOVFF       __Lib_I2C_c34d01__I2C2_TIMEOUT, I2C2_Repeated_Start_timeout_L0
0x009A	0xF167C022  	MOVFF       __Lib_I2C_c34d01__I2C2_TIMEOUT+1, I2C2_Repeated_Start_timeout_L0+1
0x009E	0xF168C023  	MOVFF       __Lib_I2C_c34d01__I2C2_TIMEOUT+2, I2C2_Repeated_Start_timeout_L0+2
0x00A2	0xF169C024  	MOVFF       __Lib_I2C_c34d01__I2C2_TIMEOUT+3, I2C2_Repeated_Start_timeout_L0+3
;__Lib_I2C_c34d01.c,274 :: 		
0x00A6	0x826B      	BSF         SSP2CON2, 1 
;__Lib_I2C_c34d01.c,275 :: 		
L_I2C2_Repeated_Start48:
0x00A8	0xA26B      	BTFSS       SSP2CON2, 1 
0x00AA	0xD01F      	BRA         L_I2C2_Repeated_Start49
;__Lib_I2C_c34d01.c,277 :: 		
0x00AC	0x5021      	MOVF        __Lib_I2C_c34d01__I2C2_TIMEOUT, 0 
0x00AE	0x1022      	IORWF       __Lib_I2C_c34d01__I2C2_TIMEOUT+1, 0 
0x00B0	0x1023      	IORWF       __Lib_I2C_c34d01__I2C2_TIMEOUT+2, 0 
0x00B2	0x1024      	IORWF       __Lib_I2C_c34d01__I2C2_TIMEOUT+3, 0 
0x00B4	0xE019      	BZ          L_I2C2_Repeated_Start50
;__Lib_I2C_c34d01.c,279 :: 		
0x00B6	0x0101      	MOVLB       1
0x00B8	0x5166      	MOVF        I2C2_Repeated_Start_timeout_L0, 0, 1
0x00BA	0x1167      	IORWF       I2C2_Repeated_Start_timeout_L0+1, 0, 1
0x00BC	0x1168      	IORWF       I2C2_Repeated_Start_timeout_L0+2, 0, 1
0x00BE	0x1169      	IORWF       I2C2_Repeated_Start_timeout_L0+3, 0, 1
0x00C0	0xE10C      	BNZ         L_I2C2_Repeated_Start51
;__Lib_I2C_c34d01.c,281 :: 		
0x00C2	0xFFE1C157  	MOVFF       _I2C2_Timeout_Ptr+2, FSR1L
0x00C6	0xFFE2C158  	MOVFF       _I2C2_Timeout_Ptr+3, FSR1H
0x00CA	0x0E06      	MOVLW       6
0x00CC	0x6EE6      	MOVWF       POSTINC1 
0x00CE	0xF000C155  	MOVFF       _I2C2_Timeout_Ptr, R0
0x00D2	0xF001C156  	MOVFF       _I2C2_Timeout_Ptr+1, R1
0x00D6	0xDFC1      	RCALL       _____DoIFC
;__Lib_I2C_c34d01.c,282 :: 		
0x00D8	0xD008      	BRA         L_I2C2_Repeated_Start49
;__Lib_I2C_c34d01.c,283 :: 		
L_I2C2_Repeated_Start51:
;__Lib_I2C_c34d01.c,284 :: 		
0x00DA	0x0E01      	MOVLW       1
0x00DC	0x0101      	MOVLB       1
0x00DE	0x5F66      	SUBWF       I2C2_Repeated_Start_timeout_L0, 1, 1
0x00E0	0x0E00      	MOVLW       0
0x00E2	0x5B67      	SUBWFB      I2C2_Repeated_Start_timeout_L0+1, 1, 1
0x00E4	0x5B68      	SUBWFB      I2C2_Repeated_Start_timeout_L0+2, 1, 1
0x00E6	0x5B69      	SUBWFB      I2C2_Repeated_Start_timeout_L0+3, 1, 1
;__Lib_I2C_c34d01.c,285 :: 		
L_I2C2_Repeated_Start50:
;__Lib_I2C_c34d01.c,286 :: 		
0x00E8	0xD7DF      	BRA         L_I2C2_Repeated_Start48
L_I2C2_Repeated_Start49:
;__Lib_I2C_c34d01.c,287 :: 		
L_end_I2C2_Repeated_Start:
0x00EA	0x0012      	RETURN      0
; end of _I2C2_Repeated_Start
_I2C1_Stop:
;__Lib_I2C_c34d01.c,193 :: 		
;__Lib_I2C_c34d01.c,194 :: 		
0x00EC	0x84C5      	BSF         SSP1CON2, 2 
;__Lib_I2C_c34d01.c,195 :: 		
L_end_I2C1_Stop:
0x00EE	0x0012      	RETURN      0
; end of _I2C1_Stop
_I2C2_Stop:
;__Lib_I2C_c34d01.c,385 :: 		
;__Lib_I2C_c34d01.c,386 :: 		
0x00F0	0x846B      	BSF         SSP2CON2, 2 
;__Lib_I2C_c34d01.c,387 :: 		
L_end_I2C2_Stop:
0x00F2	0x0012      	RETURN      0
; end of _I2C2_Stop
_read:
;comunicador_entre_PIC_PC.c,45 :: 		char read(char *mensagem) //retorna 1 se a mensagem for encontrada e zero caso não (no buffer, no caso)
;comunicador_entre_PIC_PC.c,49 :: 		for(i = 0 ; buffer[i] != 0x00; i+= 1 + j)
0x00F4	0x0101      	MOVLB       1
0x00F6	0x6B61      	CLRF        read_i_L0, 1
0x00F8	0x6B62      	CLRF        read_i_L0+1, 1
L_read4:
0x00FA	0x0E4C      	MOVLW       _buffer
0x00FC	0x2561      	ADDWF       read_i_L0, 0, 1
0x00FE	0x6EE9      	MOVWF       FSR0L 
0x0100	0x0E00      	MOVLW       hi_addr(_buffer)
0x0102	0x2162      	ADDWFC      read_i_L0+1, 0, 1
0x0104	0x6EEA      	MOVWF       FSR0H 
0x0106	0x50EE      	MOVF        POSTINC0, 0 
0x0108	0x0A00      	XORLW       0
0x010A	0xE03E      	BZ          L_read5
;comunicador_entre_PIC_PC.c,51 :: 		for(j = 0; mensagem[j] == buffer[i+j]; j ++)
0x010C	0x6B63      	CLRF        read_j_L0, 1
0x010E	0x6B64      	CLRF        read_j_L0+1, 1
L_read7:
0x0110	0x5163      	MOVF        read_j_L0, 0, 1
0x0112	0x255F      	ADDWF       FARG_read_mensagem, 0, 1
0x0114	0x6EE9      	MOVWF       FSR0L 
0x0116	0x5164      	MOVF        read_j_L0+1, 0, 1
0x0118	0x2160      	ADDWFC      FARG_read_mensagem+1, 0, 1
0x011A	0x6EEA      	MOVWF       FSR0H 
0x011C	0x5163      	MOVF        read_j_L0, 0, 1
0x011E	0x2561      	ADDWF       read_i_L0, 0, 1
0x0120	0x6E00      	MOVWF       R0 
0x0122	0x5164      	MOVF        read_j_L0+1, 0, 1
0x0124	0x2162      	ADDWFC      read_i_L0+1, 0, 1
0x0126	0x6E01      	MOVWF       R1 
0x0128	0x0E4C      	MOVLW       _buffer
0x012A	0x2400      	ADDWF       R0, 0 
0x012C	0x6ED9      	MOVWF       FSR2L 
0x012E	0x0E00      	MOVLW       hi_addr(_buffer)
0x0130	0x2001      	ADDWFC      R1, 0 
0x0132	0x6EDA      	MOVWF       FSR2H 
0x0134	0x50EE      	MOVF        POSTINC0, 0 
0x0136	0x18DE      	XORWF       POSTINC2, 0 
0x0138	0xE11C      	BNZ         L_read8
;comunicador_entre_PIC_PC.c,53 :: 		if(mensagem[j] == 0x00)
0x013A	0x5163      	MOVF        read_j_L0, 0, 1
0x013C	0x255F      	ADDWF       FARG_read_mensagem, 0, 1
0x013E	0x6EE9      	MOVWF       FSR0L 
0x0140	0x5164      	MOVF        read_j_L0+1, 0, 1
0x0142	0x2160      	ADDWFC      FARG_read_mensagem+1, 0, 1
0x0144	0x6EEA      	MOVWF       FSR0H 
0x0146	0x50EE      	MOVF        POSTINC0, 0 
0x0148	0x0A00      	XORLW       0
0x014A	0xE110      	BNZ         L_read10
;comunicador_entre_PIC_PC.c,55 :: 		margeIn = i;
0x014C	0xF04AC161  	MOVFF       read_i_L0, _margeIn
0x0150	0xF04BC162  	MOVFF       read_i_L0+1, _margeIn+1
;comunicador_entre_PIC_PC.c,56 :: 		margeOut = i+j;
0x0154	0x5163      	MOVF        read_j_L0, 0, 1
0x0156	0x2561      	ADDWF       read_i_L0, 0, 1
0x0158	0x6F4C      	MOVWF       _margeOut, 1
0x015A	0x5164      	MOVF        read_j_L0+1, 0, 1
0x015C	0x2162      	ADDWFC      read_i_L0+1, 0, 1
0x015E	0x6F4D      	MOVWF       _margeOut+1, 1
;comunicador_entre_PIC_PC.c,57 :: 		servico(servico_limpar_buffer);
0x0160	0x0E01      	MOVLW       1
0x0162	0x6F65      	MOVWF       FARG_servico_intent_field, 1
0x0164	0xDF86      	RCALL       _servico
;comunicador_entre_PIC_PC.c,58 :: 		return 1;
0x0166	0x0E01      	MOVLW       1
0x0168	0x6E00      	MOVWF       R0 
0x016A	0xD00F      	BRA         L_end_read
;comunicador_entre_PIC_PC.c,61 :: 		}
L_read10:
;comunicador_entre_PIC_PC.c,51 :: 		for(j = 0; mensagem[j] == buffer[i+j]; j ++)
0x016C	0x4B63      	INFSNZ      read_j_L0, 1, 1
0x016E	0x2B64      	INCF        read_j_L0+1, 1, 1
;comunicador_entre_PIC_PC.c,64 :: 		}
0x0170	0xD7CF      	BRA         L_read7
L_read8:
;comunicador_entre_PIC_PC.c,49 :: 		for(i = 0 ; buffer[i] != 0x00; i+= 1 + j)
0x0172	0x0E01      	MOVLW       1
0x0174	0x2563      	ADDWF       read_j_L0, 0, 1
0x0176	0x6E00      	MOVWF       R0 
0x0178	0x0E00      	MOVLW       0
0x017A	0x2164      	ADDWFC      read_j_L0+1, 0, 1
0x017C	0x6E01      	MOVWF       R1 
0x017E	0x5000      	MOVF        R0, 0 
0x0180	0x2761      	ADDWF       read_i_L0, 1, 1
0x0182	0x5001      	MOVF        R1, 0 
0x0184	0x2362      	ADDWFC      read_i_L0+1, 1, 1
;comunicador_entre_PIC_PC.c,66 :: 		}
0x0186	0xD7B9      	BRA         L_read4
L_read5:
;comunicador_entre_PIC_PC.c,67 :: 		return 0;
0x0188	0x6A00      	CLRF        R0 
;comunicador_entre_PIC_PC.c,68 :: 		}
L_end_read:
0x018A	0x0012      	RETURN      0
; end of _read
_assistente:
;comunicador_entre_PIC_PC.c,24 :: 		void assistente()  //método que realiza a limpeza do buffer, ou melhor, uma mensagem que já foi lida e interpretada
;comunicador_entre_PIC_PC.c,26 :: 		int x = margeIn;
0x018C	0xF001C04A  	MOVFF       _margeIn, R1
0x0190	0xF002C04B  	MOVFF       _margeIn+1, R2
;comunicador_entre_PIC_PC.c,27 :: 		int y = margeOut;
0x0194	0xF003C14C  	MOVFF       _margeOut, R3
0x0198	0xF004C14D  	MOVFF       _margeOut+1, R4
;comunicador_entre_PIC_PC.c,28 :: 		using_assist = 1;
0x019C	0x0E01      	MOVLW       1
0x019E	0x6E1E      	MOVWF       _using_assist 
;comunicador_entre_PIC_PC.c,31 :: 		for(y; y > x;  y--) buffer[y] = 0xFF;
L_assistente0:
0x01A0	0x0E80      	MOVLW       128
0x01A2	0x1802      	XORWF       R2, 0 
0x01A4	0x6E00      	MOVWF       R0 
0x01A6	0x0E80      	MOVLW       128
0x01A8	0x1804      	XORWF       R4, 0 
0x01AA	0x5C00      	SUBWF       R0, 0 
0x01AC	0xE102      	BNZ         L__assistente25
0x01AE	0x5003      	MOVF        R3, 0 
0x01B0	0x5C01      	SUBWF       R1, 0 
L__assistente25:
0x01B2	0xE20D      	BC          L_assistente1
0x01B4	0x0E4C      	MOVLW       _buffer
0x01B6	0x2403      	ADDWF       R3, 0 
0x01B8	0x6EE1      	MOVWF       FSR1L 
0x01BA	0x0E00      	MOVLW       hi_addr(_buffer)
0x01BC	0x2004      	ADDWFC      R4, 0 
0x01BE	0x6EE2      	MOVWF       FSR1H 
0x01C0	0x0EFF      	MOVLW       255
0x01C2	0x6EE6      	MOVWF       POSTINC1 
0x01C4	0x0E01      	MOVLW       1
0x01C6	0x5E03      	SUBWF       R3, 1 
0x01C8	0x0E00      	MOVLW       0
0x01CA	0x5A04      	SUBWFB      R4, 1 
0x01CC	0xD7E9      	BRA         L_assistente0
L_assistente1:
;comunicador_entre_PIC_PC.c,32 :: 		margeIn = margeOut = using_assist = 0;
0x01CE	0x6A1E      	CLRF        _using_assist 
0x01D0	0x0101      	MOVLB       1
0x01D2	0x6B4C      	CLRF        _margeOut, 1
0x01D4	0x6B4D      	CLRF        _margeOut+1, 1
0x01D6	0x6A4A      	CLRF        _margeIn 
0x01D8	0x6A4B      	CLRF        _margeIn+1 
;comunicador_entre_PIC_PC.c,35 :: 		}
L_end_assistente:
0x01DA	0x0012      	RETURN      0
; end of _assistente
_I2C1_Repeated_Start:
;__Lib_I2C_c34d01.c,77 :: 		
;__Lib_I2C_c34d01.c,80 :: 		
0x01DC	0xF166C044  	MOVFF       __Lib_I2C_c34d01__I2C1_TIMEOUT, I2C1_Repeated_Start_timeout_L0
0x01E0	0xF167C045  	MOVFF       __Lib_I2C_c34d01__I2C1_TIMEOUT+1, I2C1_Repeated_Start_timeout_L0+1
0x01E4	0xF168C046  	MOVFF       __Lib_I2C_c34d01__I2C1_TIMEOUT+2, I2C1_Repeated_Start_timeout_L0+2
0x01E8	0xF169C047  	MOVFF       __Lib_I2C_c34d01__I2C1_TIMEOUT+3, I2C1_Repeated_Start_timeout_L0+3
;__Lib_I2C_c34d01.c,82 :: 		
0x01EC	0x82C5      	BSF         SSP1CON2, 1 
;__Lib_I2C_c34d01.c,83 :: 		
L_I2C1_Repeated_Start12:
0x01EE	0xA2C5      	BTFSS       SSP1CON2, 1 
0x01F0	0xD01F      	BRA         L_I2C1_Repeated_Start13
;__Lib_I2C_c34d01.c,85 :: 		
0x01F2	0x5044      	MOVF        __Lib_I2C_c34d01__I2C1_TIMEOUT, 0 
0x01F4	0x1045      	IORWF       __Lib_I2C_c34d01__I2C1_TIMEOUT+1, 0 
0x01F6	0x1046      	IORWF       __Lib_I2C_c34d01__I2C1_TIMEOUT+2, 0 
0x01F8	0x1047      	IORWF       __Lib_I2C_c34d01__I2C1_TIMEOUT+3, 0 
0x01FA	0xE019      	BZ          L_I2C1_Repeated_Start14
;__Lib_I2C_c34d01.c,87 :: 		
0x01FC	0x0101      	MOVLB       1
0x01FE	0x5166      	MOVF        I2C1_Repeated_Start_timeout_L0, 0, 1
0x0200	0x1167      	IORWF       I2C1_Repeated_Start_timeout_L0+1, 0, 1
0x0202	0x1168      	IORWF       I2C1_Repeated_Start_timeout_L0+2, 0, 1
0x0204	0x1169      	IORWF       I2C1_Repeated_Start_timeout_L0+3, 0, 1
0x0206	0xE10C      	BNZ         L_I2C1_Repeated_Start15
;__Lib_I2C_c34d01.c,89 :: 		
0x0208	0xFFE1C153  	MOVFF       _I2C1_Timeout_Ptr+2, FSR1L
0x020C	0xFFE2C154  	MOVFF       _I2C1_Timeout_Ptr+3, FSR1H
0x0210	0x0E06      	MOVLW       6
0x0212	0x6EE6      	MOVWF       POSTINC1 
0x0214	0xF000C151  	MOVFF       _I2C1_Timeout_Ptr, R0
0x0218	0xF001C152  	MOVFF       _I2C1_Timeout_Ptr+1, R1
0x021C	0xDF1E      	RCALL       _____DoIFC
;__Lib_I2C_c34d01.c,90 :: 		
0x021E	0xD008      	BRA         L_I2C1_Repeated_Start13
;__Lib_I2C_c34d01.c,91 :: 		
L_I2C1_Repeated_Start15:
;__Lib_I2C_c34d01.c,92 :: 		
0x0220	0x0E01      	MOVLW       1
0x0222	0x0101      	MOVLB       1
0x0224	0x5F66      	SUBWF       I2C1_Repeated_Start_timeout_L0, 1, 1
0x0226	0x0E00      	MOVLW       0
0x0228	0x5B67      	SUBWFB      I2C1_Repeated_Start_timeout_L0+1, 1, 1
0x022A	0x5B68      	SUBWFB      I2C1_Repeated_Start_timeout_L0+2, 1, 1
0x022C	0x5B69      	SUBWFB      I2C1_Repeated_Start_timeout_L0+3, 1, 1
;__Lib_I2C_c34d01.c,93 :: 		
L_I2C1_Repeated_Start14:
;__Lib_I2C_c34d01.c,94 :: 		
0x022E	0xD7DF      	BRA         L_I2C1_Repeated_Start12
L_I2C1_Repeated_Start13:
;__Lib_I2C_c34d01.c,95 :: 		
L_end_I2C1_Repeated_Start:
0x0230	0x0012      	RETURN      0
; end of _I2C1_Repeated_Start
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0232	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0234	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0238	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x023A	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x023C	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x023E	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0240	0x0012      	RETURN      0
; end of ___CC2DW
_loop:
;comunicador_entre_PIC_PC.c,70 :: 		unsigned char loop()
;comunicador_entre_PIC_PC.c,72 :: 		if(read("CELL:AcenderLED"))
0x0242	0x0E25      	MOVLW       ?lstr1_comunicador_entre_PIC_PC
0x0244	0x0101      	MOVLB       1
0x0246	0x6F5F      	MOVWF       FARG_read_mensagem, 1
0x0248	0x0E00      	MOVLW       hi_addr(?lstr1_comunicador_entre_PIC_PC)
0x024A	0x6F60      	MOVWF       FARG_read_mensagem+1, 1
0x024C	0xDF53      	RCALL       _read
0x024E	0x5200      	MOVF        R0, 1 
0x0250	0xE003      	BZ          L_loop11
;comunicador_entre_PIC_PC.c,74 :: 		TRISB = 0x00;
0x0252	0x6A93      	CLRF        TRISB 
;comunicador_entre_PIC_PC.c,75 :: 		PORTB = 0xFF;
0x0254	0x0EFF      	MOVLW       255
0x0256	0x6E81      	MOVWF       PORTB 
;comunicador_entre_PIC_PC.c,76 :: 		}
L_loop11:
;comunicador_entre_PIC_PC.c,79 :: 		if(read("CELL:ApagarLED"))
0x0258	0x0E35      	MOVLW       ?lstr2_comunicador_entre_PIC_PC
0x025A	0x6F5F      	MOVWF       FARG_read_mensagem, 1
0x025C	0x0E00      	MOVLW       hi_addr(?lstr2_comunicador_entre_PIC_PC)
0x025E	0x6F60      	MOVWF       FARG_read_mensagem+1, 1
0x0260	0xDF49      	RCALL       _read
0x0262	0x5200      	MOVF        R0, 1 
0x0264	0xA4D8      	BTFSS       STATUS, 2 
;comunicador_entre_PIC_PC.c,81 :: 		PORTB = 0x00;
0x0266	0x6A81      	CLRF        PORTB 
;comunicador_entre_PIC_PC.c,83 :: 		}
L_loop12:
;comunicador_entre_PIC_PC.c,88 :: 		return 0;
0x0268	0x6A00      	CLRF        R0 
;comunicador_entre_PIC_PC.c,89 :: 		}
L_end_loop:
0x026A	0x0012      	RETURN      0
; end of _loop
_interrupt:
;comunicador_entre_PIC_PC.c,102 :: 		void interrupt() //a interrupção de alta prioridade apenas armazenará os dados recebidos (no momento apenas do computador)
;comunicador_entre_PIC_PC.c,105 :: 		buffer[posBuffer] = RC1REG;
0x026C	0xF01CCFE1  	MOVFF       FSR1L, 28
0x0270	0xF01DCFE2  	MOVFF       FSR1H, 29
0x0274	0x0E4C      	MOVLW       _buffer
0x0276	0x241F      	ADDWF       _posBuffer, 0 
0x0278	0x6EE1      	MOVWF       FSR1L 
0x027A	0x0E00      	MOVLW       hi_addr(_buffer)
0x027C	0x2020      	ADDWFC      _posBuffer+1, 0 
0x027E	0x6EE2      	MOVWF       FSR1H 
0x0280	0xFFE6CFAE  	MOVFF       RC1REG, POSTINC1
;comunicador_entre_PIC_PC.c,106 :: 		posBuffer++;
0x0284	0x4A1F      	INFSNZ      _posBuffer, 1 
0x0286	0x2A20      	INCF        _posBuffer+1, 1 
;comunicador_entre_PIC_PC.c,107 :: 		buffer[posBuffer] = 0x00;
0x0288	0x0E4C      	MOVLW       _buffer
0x028A	0x241F      	ADDWF       _posBuffer, 0 
0x028C	0x6EE1      	MOVWF       FSR1L 
0x028E	0x0E00      	MOVLW       hi_addr(_buffer)
0x0290	0x2020      	ADDWFC      _posBuffer+1, 0 
0x0292	0x6EE2      	MOVWF       FSR1H 
0x0294	0x6AE6      	CLRF        POSTINC1 
;comunicador_entre_PIC_PC.c,109 :: 		}
L_end_interrupt:
L__interrupt32:
0x0296	0xFFE1C01C  	MOVFF       28, FSR1L
0x029A	0xFFE2C01D  	MOVFF       29, FSR1H
0x029E	0x0011      	RETFIE      1
; end of _interrupt
_main:
0x02A0	0xF001ECE8  	CALL        976, 0
;comunicador_entre_PIC_PC.c,111 :: 		void main()
;comunicador_entre_PIC_PC.c,124 :: 		TXSTA2.BRGH = 1; //Desabilita o Intenso Baundrate
0x02A4	0x8472      	BSF         TXSTA2, 2 
;comunicador_entre_PIC_PC.c,125 :: 		BAUDCON2.BRG16 = 1; //Contador utiliza os dezesseis bits (o registrador SPBRG1 é utilizado,e descarta o SPBRGH1 quando esta em zero)
0x02A6	0x8670      	BSF         BAUDCON2, 3 
;comunicador_entre_PIC_PC.c,126 :: 		SPBRGH2 = 0x00;
0x02A8	0x6A76      	CLRF        SPBRGH2 
;comunicador_entre_PIC_PC.c,127 :: 		SPBRG2 = 0x45; //baundrate configurado para (utilizando uma frequencia de aproxidamente 35MHz);
0x02AA	0x0E45      	MOVLW       69
0x02AC	0x6E75      	MOVWF       SPBRG2 
;comunicador_entre_PIC_PC.c,131 :: 		TRISB = 0xFF;
0x02AE	0x0EFF      	MOVLW       255
0x02B0	0x6E93      	MOVWF       TRISB 
;comunicador_entre_PIC_PC.c,132 :: 		TRISC = 0xFF; //os dois registradores acima possuem pinos referentes ao EUSART1 e EUSART2, respectivamente e devem ser setados como saída
0x02B2	0x0EFF      	MOVLW       255
0x02B4	0x6E94      	MOVWF       TRISC 
;comunicador_entre_PIC_PC.c,133 :: 		TRISD = 0xFF;
0x02B6	0x0EFF      	MOVLW       255
0x02B8	0x6E95      	MOVWF       TRISD 
;comunicador_entre_PIC_PC.c,145 :: 		TXSTA2.SYNC = 0;  //modo assincrono
0x02BA	0x9872      	BCF         TXSTA2, 4 
;comunicador_entre_PIC_PC.c,146 :: 		RCSTA2.SPEN = 1;  //liga a eusart
0x02BC	0x8E71      	BSF         RCSTA2, 7 
;comunicador_entre_PIC_PC.c,147 :: 		TXSTA2.TXEN = 1;  //liga o circuito transmissor
0x02BE	0x8A72      	BSF         TXSTA2, 5 
;comunicador_entre_PIC_PC.c,148 :: 		TX2IE_bit = 0;    //flag do receptor setado para zero pois não será utilizado a interrupção por envio de dados
0x02C0	0x98A3      	BCF         TX2IE_bit, BitPos(TX2IE_bit+0) 
;comunicador_entre_PIC_PC.c,149 :: 		ANSELD = 0x00;    //Os registrador Analogico-Digital devem estar desabilitado para que a comunicação funcione (ANSELB para o EUSART1 e ANSELC para EUSART2
0x02C2	0x010F      	MOVLB       15
0x02C4	0x6B3B      	CLRF        ANSELD, 1
;comunicador_entre_PIC_PC.c,160 :: 		RCSTA2.CREN = 1; //similar ao spen. Habilita o circuito
0x02C6	0x8871      	BSF         RCSTA2, 4 
;comunicador_entre_PIC_PC.c,163 :: 		while(PIR3.RC2IF) {RCREG2;} //para limpar o buffer. Uma precaução antes de iniciar o programa. Enquanto houver dados no buffer, lê-los.
L_main16:
0x02C8	0xAAA4      	BTFSS       PIR3, 5 
0x02CA	0xD001      	BRA         L_main17
0x02CC	0xD7FD      	BRA         L_main16
L_main17:
;comunicador_entre_PIC_PC.c,168 :: 		INTCON.GIE = 0x01;  //habilita a interrupção global
0x02CE	0x8EF2      	BSF         INTCON, 7 
;comunicador_entre_PIC_PC.c,169 :: 		INTCON.PEIE = 0x01; //habilita a interrupção por periférico
0x02D0	0x8CF2      	BSF         INTCON, 6 
;comunicador_entre_PIC_PC.c,170 :: 		RCON.IPEN = 0x01; //interrupção por prioridades habilitado (significa que poderá haver interrupção de alto nível e baixo nível no programa)
0x02D2	0x8ED0      	BSF         RCON, 7 
;comunicador_entre_PIC_PC.c,181 :: 		IPR3.RC2IP = 0x01;         //recepção de dados (RX) possui interrupção de alta prioridade
0x02D4	0x8AA5      	BSF         IPR3, 5 
;comunicador_entre_PIC_PC.c,182 :: 		IPR3.TX2IP = 0x01;         //tranmissao possui interrupção de alta prioridade
0x02D6	0x88A5      	BSF         IPR3, 4 
;comunicador_entre_PIC_PC.c,183 :: 		PIR3.TX2IF = 0x00;            //flag setada para um toda vez que a transmissão eusart estiver habilitada e não houver dados sendo segurados no TXREG. é apenas zero quando o registrador tsr esta ocupado com um byte e um byte está a espara para a tranmissão em txreg
0x02D8	0x98A4      	BCF         PIR3, 4 
;comunicador_entre_PIC_PC.c,184 :: 		PIE3.TX2IE = 0x00;            //desabilita interrupção por tx
0x02DA	0x98A3      	BCF         PIE3, 4 
;comunicador_entre_PIC_PC.c,185 :: 		PIR3.RC2IF = 0x00;            //flag setada para um enquanto houver dados para receber e tratar
0x02DC	0x9AA4      	BCF         PIR3, 5 
;comunicador_entre_PIC_PC.c,186 :: 		PIE3.RC2IE = 0x01;            // habilita a interrpção por rx
0x02DE	0x8AA3      	BSF         PIE3, 5 
;comunicador_entre_PIC_PC.c,189 :: 		PIR5.TMR6IF = 0;
0x02E0	0x947E      	BCF         PIR5, 2 
;comunicador_entre_PIC_PC.c,190 :: 		PIR5.TMR4IF = 0;
0x02E2	0x907E      	BCF         PIR5, 0 
;comunicador_entre_PIC_PC.c,191 :: 		PIE5.TMR6IE = 1;
0x02E4	0x847D      	BSF         PIE5, 2 
;comunicador_entre_PIC_PC.c,192 :: 		PIR5.TMR4IE = 1;
0x02E6	0x807E      	BSF         PIR5, 0 
;comunicador_entre_PIC_PC.c,193 :: 		IPR5.TMR6IP = 0;
0x02E8	0x947F      	BCF         IPR5, 2 
;comunicador_entre_PIC_PC.c,194 :: 		IPR5.TMR4IP = 0;
0x02EA	0x907F      	BCF         IPR5, 0 
;comunicador_entre_PIC_PC.c,195 :: 		TMR6 = 0;
0x02EC	0x6B4C      	CLRF        TMR6, 1
;comunicador_entre_PIC_PC.c,196 :: 		TMR4 = 0;
0x02EE	0x6B53      	CLRF        TMR4, 1
;comunicador_entre_PIC_PC.c,197 :: 		T6CON = 0b00111001; //os valores do timer ainda devem ser ajustados corretamente
0x02F0	0x0E39      	MOVLW       57
0x02F2	0x6F4A      	MOVWF       T6CON, 1
;comunicador_entre_PIC_PC.c,198 :: 		T4CON = 0b00111001; //define um tempo para 10 ms (pode estar errao por hora) considerando uma entrada de 136 vezes na interrupção  e uma frequencia d 31MHz
0x02F4	0x0E39      	MOVLW       57
0x02F6	0x6F51      	MOVWF       T4CON, 1
;comunicador_entre_PIC_PC.c,199 :: 		T6CON.TMR6ON = 0;
0x02F8	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,200 :: 		T6CON.TMR4ON = 0;
0x02FA	0x954A      	BCF         T6CON, 2, 1
;comunicador_entre_PIC_PC.c,205 :: 		for(i = 0; i < tamanhoBuffer;i++) buffer[i] = 0xFF;
0x02FC	0x0101      	MOVLB       1
0x02FE	0x6B5D      	CLRF        main_i_L0, 1
0x0300	0x6B5E      	CLRF        main_i_L0+1, 1
L_main18:
0x0302	0x0E80      	MOVLW       128
0x0304	0x195E      	XORWF       main_i_L0+1, 0, 1
0x0306	0x6E00      	MOVWF       R0 
0x0308	0x0E80      	MOVLW       128
0x030A	0x0A01      	XORLW       1
0x030C	0x5C00      	SUBWF       R0, 0 
0x030E	0xE102      	BNZ         L__main34
0x0310	0x0E00      	MOVLW       0
0x0312	0x5D5D      	SUBWF       main_i_L0, 0, 1
L__main34:
0x0314	0xE20B      	BC          L_main19
0x0316	0x0E4C      	MOVLW       _buffer
0x0318	0x255D      	ADDWF       main_i_L0, 0, 1
0x031A	0x6EE1      	MOVWF       FSR1L 
0x031C	0x0E00      	MOVLW       hi_addr(_buffer)
0x031E	0x215E      	ADDWFC      main_i_L0+1, 0, 1
0x0320	0x6EE2      	MOVWF       FSR1H 
0x0322	0x0EFF      	MOVLW       255
0x0324	0x6EE6      	MOVWF       POSTINC1 
0x0326	0x4B5D      	INFSNZ      main_i_L0, 1, 1
0x0328	0x2B5E      	INCF        main_i_L0+1, 1, 1
0x032A	0xD7EB      	BRA         L_main18
L_main19:
;comunicador_entre_PIC_PC.c,208 :: 		while(1)
L_main21:
;comunicador_entre_PIC_PC.c,210 :: 		retorno = loop();
0x032C	0xDF8A      	RCALL       _loop
0x032E	0xF14EC000  	MOVFF       R0, _retorno
;comunicador_entre_PIC_PC.c,212 :: 		if(posBuffer > offset)
0x0332	0x0E80      	MOVLW       128
0x0334	0x0A01      	XORLW       1
0x0336	0x6E00      	MOVWF       R0 
0x0338	0x0E80      	MOVLW       128
0x033A	0x1820      	XORWF       _posBuffer+1, 0 
0x033C	0x5C00      	SUBWF       R0, 0 
0x033E	0xE102      	BNZ         L__main35
0x0340	0x501F      	MOVF        _posBuffer, 0 
0x0342	0x0880      	SUBLW       128
L__main35:
0x0344	0xE202      	BC          L_main23
;comunicador_entre_PIC_PC.c,214 :: 		posBuffer = 0;
0x0346	0x6A1F      	CLRF        _posBuffer 
0x0348	0x6A20      	CLRF        _posBuffer+1 
;comunicador_entre_PIC_PC.c,216 :: 		}
L_main23:
;comunicador_entre_PIC_PC.c,219 :: 		}
0x034A	0xD7F0      	BRA         L_main21
;comunicador_entre_PIC_PC.c,225 :: 		}
L_end_main:
0x034C	0xD7FF      	BRA         $+0
; end of _main
_interrupt_low:
0x034E	0xF019C000  	MOVFF       R0, 25
0x0352	0xF018C001  	MOVFF       R1, 24
0x0356	0xF01ACFE1  	MOVFF       FSR1L, 26
0x035A	0xF01BCFE2  	MOVFF       FSR1H, 27
0x035E	0x6E15      	MOVWF       ___Low_saveWREG 
0x0360	0xF016CFD8  	MOVFF       STATUS, ___Low_saveSTATUS
0x0364	0xF017CFE0  	MOVFF       BSR, ___Low_saveBSR
;comunicador_entre_PIC_PC.c,92 :: 		void interrupt_low()  //a interrupção de baixa prioridade que chamará os serviços
;comunicador_entre_PIC_PC.c,94 :: 		if(timer4timer < 136) asm retfie;
0x0368	0x0E88      	MOVLW       136
0x036A	0x5C48      	SUBWF       _timer4timer, 0 
0x036C	0xA0D8      	BTFSS       STATUS, 0 
0x036E	0x0010      	RETFIE      0
L_interrupt_low13:
;comunicador_entre_PIC_PC.c,95 :: 		if(timer6timer < 136) asm retfie;
0x0370	0x0E88      	MOVLW       136
0x0372	0x5C49      	SUBWF       _timer6timer, 0 
0x0374	0xA0D8      	BTFSS       STATUS, 0 
0x0376	0x0010      	RETFIE      0
L_interrupt_low14:
;comunicador_entre_PIC_PC.c,97 :: 		if(overflow) assist();overflow = 0;
0x0378	0xA47E      	BTFSS       TMR6IF_bit, BitPos(TMR6IF_bit+0) 
0x037A	0xD005      	BRA         L_interrupt_low15
0x037C	0xF000C159  	MOVFF       _assist, R0
0x0380	0xF001C15A  	MOVFF       _assist+1, R1
0x0384	0xDE6A      	RCALL       _____DoIFC
L_interrupt_low15:
0x0386	0x947E      	BCF         TMR6IF_bit, BitPos(TMR6IF_bit+0) 
;comunicador_entre_PIC_PC.c,99 :: 		} //end interrupt low
L_end_interrupt_low:
L__interrupt_low30:
0x0388	0x5017      	MOVF        ___Low_saveBSR, 0 
0x038A	0x6EE0      	MOVWF       BSR 
0x038C	0x5016      	MOVF        ___Low_saveSTATUS, 0 
0x038E	0x6ED8      	MOVWF       STATUS 
0x0390	0x3A15      	SWAPF       ___Low_saveWREG, 1 
0x0392	0x3815      	SWAPF       ___Low_saveWREG, 0 
0x0394	0xF000C019  	MOVFF       25, R0
0x0398	0xF001C018  	MOVFF       24, R1
0x039C	0xFFE1C01A  	MOVFF       26, FSR1L
0x03A0	0xFFE2C01B  	MOVFF       27, FSR1H
0x03A4	0x0010      	RETFIE      0
; end of _interrupt_low
0x03D0	0xF01EEE10  	LFSR        1, 30
0x03D4	0x0E2A      	MOVLW       42
0x03D6	0x6E00      	MOVWF       R0 
0x03D8	0x0E01      	MOVLW       1
0x03DA	0x6E01      	MOVWF       R1 
0x03DC	0x0EA6      	MOVLW       166
0x03DE	0x6EF6      	MOVWF       4086 
0x03E0	0x0E03      	MOVLW       3
0x03E2	0x6EF7      	MOVWF       TBLPTRH 
0x03E4	0x0E00      	MOVLW       0
0x03E6	0x6EF8      	MOVWF       TBLPTRU 
0x03E8	0xF001EC19  	CALL        562, 0
0x03EC	0x0012      	RETURN      0
;comunicador_entre_PIC_PC.c,0 :: ?ICS_using_assist
0x03A6	0x00 ;?ICS_using_assist+0
; end of ?ICS_using_assist
;comunicador_entre_PIC_PC.c,0 :: ?ICS_posBuffer
0x03A7	0x0000 ;?ICS_posBuffer+0
; end of ?ICS_posBuffer
;__Lib_I2C_c34d01.c,0 :: ?ICS__Lib_I2C_c34d01__I2C2_TIMEOUT
0x03A9	0x0000 ;?ICS__Lib_I2C_c34d01__I2C2_TIMEOUT+0
0x03AB	0x0000 ;?ICS__Lib_I2C_c34d01__I2C2_TIMEOUT+2
; end of ?ICS__Lib_I2C_c34d01__I2C2_TIMEOUT
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr1_comunicador_entre_PIC_PC
0x03AD	0x4543 ;?ICS?lstr1_comunicador_entre_PIC_PC+0
0x03AF	0x4C4C ;?ICS?lstr1_comunicador_entre_PIC_PC+2
0x03B1	0x413A ;?ICS?lstr1_comunicador_entre_PIC_PC+4
0x03B3	0x6563 ;?ICS?lstr1_comunicador_entre_PIC_PC+6
0x03B5	0x646E ;?ICS?lstr1_comunicador_entre_PIC_PC+8
0x03B7	0x7265 ;?ICS?lstr1_comunicador_entre_PIC_PC+10
0x03B9	0x454C ;?ICS?lstr1_comunicador_entre_PIC_PC+12
0x03BB	0x0044 ;?ICS?lstr1_comunicador_entre_PIC_PC+14
; end of ?ICS?lstr1_comunicador_entre_PIC_PC
;comunicador_entre_PIC_PC.c,0 :: ?ICS?lstr2_comunicador_entre_PIC_PC
0x03BD	0x4543 ;?ICS?lstr2_comunicador_entre_PIC_PC+0
0x03BF	0x4C4C ;?ICS?lstr2_comunicador_entre_PIC_PC+2
0x03C1	0x413A ;?ICS?lstr2_comunicador_entre_PIC_PC+4
0x03C3	0x6170 ;?ICS?lstr2_comunicador_entre_PIC_PC+6
0x03C5	0x6167 ;?ICS?lstr2_comunicador_entre_PIC_PC+8
0x03C7	0x4C72 ;?ICS?lstr2_comunicador_entre_PIC_PC+10
0x03C9	0x4445 ;?ICS?lstr2_comunicador_entre_PIC_PC+12
0x03CB	0x00 ;?ICS?lstr2_comunicador_entre_PIC_PC+14
; end of ?ICS?lstr2_comunicador_entre_PIC_PC
;__Lib_I2C_c34d01.c,0 :: ?ICS__Lib_I2C_c34d01__I2C1_TIMEOUT
0x03CC	0x0000 ;?ICS__Lib_I2C_c34d01__I2C1_TIMEOUT+0
0x03CE	0x0000 ;?ICS__Lib_I2C_c34d01__I2C1_TIMEOUT+2
; end of ?ICS__Lib_I2C_c34d01__I2C1_TIMEOUT
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [14]    _UART1_Write
0x002A      [12]    _UART2_Write
0x0036      [18]    _SPI1_Write
0x0048      [18]    _SPI2_Write
0x005A      [24]    _____DoIFC
0x0072      [36]    _servico
0x0096      [86]    _I2C2_Repeated_Start
0x00EC       [4]    _I2C1_Stop
0x00F0       [4]    _I2C2_Stop
0x00F4     [152]    _read
0x018C      [80]    _assistente
0x01DC      [86]    _I2C1_Repeated_Start
0x0232      [16]    ___CC2DW
0x0242      [42]    _loop
0x026C      [52]    _interrupt
0x02A0     [174]    _main
0x034E      [88]    _interrupt_low
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    R0
0x0000       [1]    UART2_Init_tmp_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    R1
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [2]    assistente_x_L0
0x0002       [2]    __Lib_FT810_alt_memset_pp_L0
0x0002       [2]    __Lib_FT810_alt_strlen_cp_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    __Lib_FT810_alt_memcpy_dd_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    R2
0x0002       [2]    __Lib_FT800_alt_memset_pp_L0
0x0002       [2]    __Lib_FT812_alt_memcpy_dd_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    __Lib_FT800_alt_memcpy_dd_L0
0x0002       [2]    __Lib_FT800_alt_strlen_cp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    __Lib_FT812_alt_strlen_cp_L0
0x0002       [2]    __Lib_FT812_alt_memset_pp_L0
0x0002       [2]    strlen_cp_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [4]    FT800_Canvas_SurrRect_minX_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    assistente_y_L0
0x0003       [2]    memmove_tt_L0
0x0003       [4]    FT810_Canvas_SurrRect_minX_L0
0x0003       [4]    FT812_Canvas_SurrRect_minX_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [1]    R3
0x0004       [2]    strcat_cp_L0
0x0004       [1]    R4
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    __Lib_FT810_alt_memcpy_ss_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    __Lib_FT800_alt_memcpy_ss_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [3]    __Lib_FT810_alt_strlen_const_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [3]    __Lib_FT800_alt_strlen_const_cp_L0
0x0004       [2]    __Lib_FT812_alt_memcpy_ss_L0
0x0004       [3]    __Lib_FT812_alt_strlen_const_cp_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    strncat_cp_L0
0x0005       [1]    R5
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    Ltrim_p_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0007       [4]    FT810_Canvas_SurrRect_minY_L0
0x0007       [4]    FT800_Canvas_SurrRect_minY_L0
0x0007       [4]    FT812_Canvas_SurrRect_minY_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x000A       [1]    R10
0x000B       [4]    FT800_Canvas_SurrRect_maxX_L0
0x000B       [4]    FT812_Canvas_SurrRect_maxX_L0
0x000B       [1]    R11
0x000B       [4]    FT810_Canvas_SurrRect_maxX_L0
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [4]    FT800_Canvas_SurrRect_maxY_L0
0x000F       [1]    R15
0x000F       [4]    FT812_Canvas_SurrRect_maxY_L0
0x000F       [4]    FT810_Canvas_SurrRect_maxY_L0
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    ___Low_saveWREG
0x0016       [1]    ___Low_saveSTATUS
0x0017       [1]    ___Low_saveBSR
0x001E       [1]    _using_assist
0x001F       [2]    _posBuffer
0x0021       [4]    __Lib_I2C_c34d01__I2C2_TIMEOUT
0x0025      [16]    ?lstr1_comunicador_entre_PIC_PC
0x0035      [15]    ?lstr2_comunicador_entre_PIC_PC
0x0044       [4]    __Lib_I2C_c34d01__I2C1_TIMEOUT
0x0048       [1]    _timer4timer
0x0049       [1]    _timer6timer
0x004A       [2]    _margeIn
0x004C     [256]    _buffer
0x014C       [2]    _margeOut
0x014E       [1]    _retorno
0x014F       [2]    _tent
0x0151       [4]    _I2C1_Timeout_Ptr
0x0155       [4]    _I2C2_Timeout_Ptr
0x0159       [4]    _assist
0x015D       [2]    main_i_L0
0x015F       [2]    FARG_read_mensagem
0x0161       [2]    read_i_L0
0x0163       [2]    read_j_L0
0x0165       [1]    FARG_servico_intent_field
0x0166       [4]    I2C1_Repeated_Start_timeout_L0
0x0166       [4]    I2C2_Repeated_Start_timeout_L0
0x016A       [1]    FARG_UART1_Write_data_
0x016A       [1]    FARG_UART2_Write_data_
0x016A       [1]    FARG_SPI1_Write_data_
0x016A       [1]    FARG_SPI2_Write_data_
0x0F3B       [1]    ANSELD
0x0F4A       [1]    T6CON
0x0F4C       [1]    TMR6
0x0F51       [1]    T4CON
0x0F53       [1]    TMR4
0x0F6B       [1]    SSP2CON2
0x0F6D       [1]    SSP2STAT
0x0F6F       [1]    SSP2BUF
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F74       [1]    RCREG2
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F7D       [1]    PIE5
0x0F7E       [0]    TMR6IF_bit
0x0F7E       [1]    PIR5
0x0F7F       [1]    IPR5
0x0F81       [1]    PORTB
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FA3       [1]    PIE3
0x0FA3       [0]    TX2IE_bit
0x0FA4       [1]    PIR3
0x0FA5       [1]    IPR3
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RC1REG
0x0FC5       [1]    SSP1CON2
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD0       [1]    RCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x03A6       [1]    ?ICS_using_assist
0x03A7       [2]    ?ICS_posBuffer
0x03A9       [4]    ?ICS__Lib_I2C_c34d01__I2C2_TIMEOUT
0x03AD      [16]    ?ICS?lstr1_comunicador_entre_PIC_PC
0x03BD      [15]    ?ICS?lstr2_comunicador_entre_PIC_PC
0x03CC       [4]    ?ICS__Lib_I2C_c34d01__I2C1_TIMEOUT
